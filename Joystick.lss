
Joystick.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001a4  00800100  00000d6e  00000e02  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d6e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000024  008002a4  008002a4  00000fa6  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00000fa6  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000003c8  00000000  00000000  00000fb8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00005611  00000000  00000000  00001380  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001653  00000000  00000000  00006991  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000037cb  00000000  00000000  00007fe4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000008b4  00000000  00000000  0000b7b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000025b2  00000000  00000000  0000c064  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00003c19  00000000  00000000  0000e616  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000560  00000000  00000000  0001222f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	a6 c0       	rjmp	.+332    	; 0x14e <__ctors_end>
   2:	00 00       	nop
   4:	bf c0       	rjmp	.+382    	; 0x184 <__bad_interrupt>
   6:	00 00       	nop
   8:	bd c0       	rjmp	.+378    	; 0x184 <__bad_interrupt>
   a:	00 00       	nop
   c:	bb c0       	rjmp	.+374    	; 0x184 <__bad_interrupt>
   e:	00 00       	nop
  10:	b9 c0       	rjmp	.+370    	; 0x184 <__bad_interrupt>
  12:	00 00       	nop
  14:	b7 c0       	rjmp	.+366    	; 0x184 <__bad_interrupt>
  16:	00 00       	nop
  18:	b5 c0       	rjmp	.+362    	; 0x184 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	b3 c0       	rjmp	.+358    	; 0x184 <__bad_interrupt>
  1e:	00 00       	nop
  20:	b1 c0       	rjmp	.+354    	; 0x184 <__bad_interrupt>
  22:	00 00       	nop
  24:	af c0       	rjmp	.+350    	; 0x184 <__bad_interrupt>
  26:	00 00       	nop
  28:	ad c0       	rjmp	.+346    	; 0x184 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	73 c4       	rjmp	.+2278   	; 0x914 <__vector_11>
  2e:	00 00       	nop
  30:	a9 c0       	rjmp	.+338    	; 0x184 <__bad_interrupt>
  32:	00 00       	nop
  34:	a7 c0       	rjmp	.+334    	; 0x184 <__bad_interrupt>
  36:	00 00       	nop
  38:	a5 c0       	rjmp	.+330    	; 0x184 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	a3 c0       	rjmp	.+326    	; 0x184 <__bad_interrupt>
  3e:	00 00       	nop
  40:	a1 c0       	rjmp	.+322    	; 0x184 <__bad_interrupt>
  42:	00 00       	nop
  44:	9f c0       	rjmp	.+318    	; 0x184 <__bad_interrupt>
  46:	00 00       	nop
  48:	9d c0       	rjmp	.+314    	; 0x184 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	9b c0       	rjmp	.+310    	; 0x184 <__bad_interrupt>
  4e:	00 00       	nop
  50:	99 c0       	rjmp	.+306    	; 0x184 <__bad_interrupt>
  52:	00 00       	nop
  54:	97 c0       	rjmp	.+302    	; 0x184 <__bad_interrupt>
  56:	00 00       	nop
  58:	95 c0       	rjmp	.+298    	; 0x184 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	93 c0       	rjmp	.+294    	; 0x184 <__bad_interrupt>
  5e:	00 00       	nop
  60:	91 c0       	rjmp	.+290    	; 0x184 <__bad_interrupt>
  62:	00 00       	nop
  64:	8f c0       	rjmp	.+286    	; 0x184 <__bad_interrupt>
  66:	00 00       	nop
  68:	8d c0       	rjmp	.+282    	; 0x184 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	8b c0       	rjmp	.+278    	; 0x184 <__bad_interrupt>
  6e:	00 00       	nop
  70:	89 c0       	rjmp	.+274    	; 0x184 <__bad_interrupt>
  72:	00 00       	nop

00000074 <ProductString>:
  74:	24 03 50 00 4f 00 4b 00 4b 00 45 00 4e 00 20 00     $.P.O.K.K.E.N. .
  84:	43 00 4f 00 4e 00 54 00 52 00 4f 00 4c 00 4c 00     C.O.N.T.R.O.L.L.
  94:	45 00 52 00 00 00                                   E.R...

0000009a <ManufacturerString>:
  9a:	1c 03 48 00 4f 00 52 00 49 00 20 00 43 00 4f 00     ..H.O.R.I. .C.O.
  aa:	2e 00 2c 00 4c 00 54 00 44 00 2e 00 00 00           ..,.L.T.D.....

000000b8 <LanguageString>:
  b8:	04 03 09 04                                         ....

000000bc <ConfigurationDescriptor>:
  bc:	09 02 29 00 01 01 00 80 fa 09 04 00 00 02 03 00     ..).............
  cc:	00 00 09 21 11 01 00 01 22 56 00 07 05 02 03 40     ...!...."V.....@
  dc:	00 05 07 05 81 03 40 00 05                          ......@..

000000e5 <DeviceDescriptor>:
  e5:	12 01 00 02 00 00 00 40 0d 0f 92 00 00 01 01 02     .......@........
  f5:	00 01                                               ..

000000f7 <JoystickReport>:
  f7:	05 01 09 05 a1 01 15 00 25 01 35 00 45 01 75 01     ........%.5.E.u.
 107:	95 10 05 09 19 01 29 10 81 02 05 01 25 07 46 3b     ......).....%.F;
 117:	01 75 04 95 01 65 14 09 39 81 42 65 00 95 01 81     .u...e..9.Be....
 127:	01 26 ff 00 46 ff 00 09 30 09 31 09 32 09 35 75     .&..F...0.1.2.5u
 137:	08 95 04 81 02 06 00 ff 09 20 95 01 81 02 0a 21     ......... .....!
 147:	26 95 08 91 02 c0 00                                &......

0000014e <__ctors_end>:
 14e:	11 24       	eor	r1, r1
 150:	1f be       	out	0x3f, r1	; 63
 152:	cf ef       	ldi	r28, 0xFF	; 255
 154:	d2 e0       	ldi	r29, 0x02	; 2
 156:	de bf       	out	0x3e, r29	; 62
 158:	cd bf       	out	0x3d, r28	; 61

0000015a <__do_copy_data>:
 15a:	12 e0       	ldi	r17, 0x02	; 2
 15c:	a0 e0       	ldi	r26, 0x00	; 0
 15e:	b1 e0       	ldi	r27, 0x01	; 1
 160:	ee e6       	ldi	r30, 0x6E	; 110
 162:	fd e0       	ldi	r31, 0x0D	; 13
 164:	02 c0       	rjmp	.+4      	; 0x16a <__do_copy_data+0x10>
 166:	05 90       	lpm	r0, Z+
 168:	0d 92       	st	X+, r0
 16a:	a4 3a       	cpi	r26, 0xA4	; 164
 16c:	b1 07       	cpc	r27, r17
 16e:	d9 f7       	brne	.-10     	; 0x166 <__do_copy_data+0xc>

00000170 <__do_clear_bss>:
 170:	22 e0       	ldi	r18, 0x02	; 2
 172:	a4 ea       	ldi	r26, 0xA4	; 164
 174:	b2 e0       	ldi	r27, 0x02	; 2
 176:	01 c0       	rjmp	.+2      	; 0x17a <.do_clear_bss_start>

00000178 <.do_clear_bss_loop>:
 178:	1d 92       	st	X+, r1

0000017a <.do_clear_bss_start>:
 17a:	a8 3c       	cpi	r26, 0xC8	; 200
 17c:	b2 07       	cpc	r27, r18
 17e:	e1 f7       	brne	.-8      	; 0x178 <.do_clear_bss_loop>
 180:	59 d1       	rcall	.+690    	; 0x434 <main>
 182:	f3 c5       	rjmp	.+3046   	; 0xd6a <_exit>

00000184 <__bad_interrupt>:
 184:	3d cf       	rjmp	.-390    	; 0x0 <__vectors>

00000186 <SetupHardware>:
}

// Configures hardware and peripherals, such as the USB peripherals.
void SetupHardware(void) {
	// We need to disable watchdog if enabled by bootloader/fuses.
	MCUSR &= ~(1 << WDRF);
 186:	84 b7       	in	r24, 0x34	; 52
 188:	87 7f       	andi	r24, 0xF7	; 247
 18a:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
 18c:	88 e1       	ldi	r24, 0x18	; 24
 18e:	0f b6       	in	r0, 0x3f	; 63
 190:	f8 94       	cli
 192:	80 93 60 00 	sts	0x0060, r24
 196:	10 92 60 00 	sts	0x0060, r1
 19a:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	80 e8       	ldi	r24, 0x80	; 128
 1a0:	0f b6       	in	r0, 0x3f	; 63
 1a2:	f8 94       	cli
 1a4:	80 93 61 00 	sts	0x0061, r24
 1a8:	90 93 61 00 	sts	0x0061, r25
 1ac:	0f be       	out	0x3f, r0	; 63
                  //We'll just flash all pins on both ports since the UNO R3
	DDRB  = 0xFF; //uses PORTB. Micro can use either or, but both give us 2 LEDs
	PORTB =  0x0; //The ATmega328P on the UNO will be resetting, so unplug it?
	#endif
	// The USB stack should be initialized last.
	USB_Init();
 1ae:	a3 c3       	rjmp	.+1862   	; 0x8f6 <USB_Init>

000001b0 <EVENT_USB_Device_Connect>:
}

// Fired to indicate that the device is enumerating.
void EVENT_USB_Device_Connect(void) {
 1b0:	08 95       	ret

000001b2 <EVENT_USB_Device_Disconnect>:
	// We can indicate that we're enumerating here (via status LEDs, sound, etc.).
}

// Fired to indicate that the device is no longer connected to a host.
void EVENT_USB_Device_Disconnect(void) {
 1b2:	08 95       	ret

000001b4 <EVENT_USB_Device_ConfigurationChanged>:
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 1b4:	42 e3       	ldi	r20, 0x32	; 50
 1b6:	60 ec       	ldi	r22, 0xC0	; 192
 1b8:	82 e0       	ldi	r24, 0x02	; 2
 1ba:	de d2       	rcall	.+1468   	; 0x778 <Endpoint_ConfigureEndpoint_Prv>
 1bc:	42 e3       	ldi	r20, 0x32	; 50
 1be:	61 ec       	ldi	r22, 0xC1	; 193
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	da c2       	rjmp	.+1460   	; 0x778 <Endpoint_ConfigureEndpoint_Prv>

000001c4 <EVENT_USB_Device_ControlRequest>:

	// We can read ConfigSuccess to indicate a success or failure at this point.
}

// Process control requests sent to the device from the USB host.
void EVENT_USB_Device_ControlRequest(void) {
 1c4:	08 95       	ret

000001c6 <GetNextReport>:
int bufindex = 0;
int duration_count = 0;
int portsval = 0;

// Prepare the next report for the host.
void GetNextReport(USB_JoystickReport_Input_t* const ReportData) {
 1c6:	cf 93       	push	r28
 1c8:	df 93       	push	r29
 1ca:	dc 01       	movw	r26, r24

	// Prepare an empty report
	memset(ReportData, 0, sizeof(USB_JoystickReport_Input_t));
 1cc:	98 e0       	ldi	r25, 0x08	; 8
 1ce:	ed 01       	movw	r28, r26
 1d0:	e9 2f       	mov	r30, r25
 1d2:	19 92       	st	Y+, r1
 1d4:	ea 95       	dec	r30
 1d6:	e9 f7       	brne	.-6      	; 0x1d2 <GetNextReport+0xc>
	ReportData->LX = STICK_CENTER;
 1d8:	80 e8       	ldi	r24, 0x80	; 128
 1da:	13 96       	adiw	r26, 0x03	; 3
 1dc:	8c 93       	st	X, r24
 1de:	13 97       	sbiw	r26, 0x03	; 3
	ReportData->LY = STICK_CENTER;
 1e0:	14 96       	adiw	r26, 0x04	; 4
 1e2:	8c 93       	st	X, r24
 1e4:	14 97       	sbiw	r26, 0x04	; 4
	ReportData->RX = STICK_CENTER;
 1e6:	15 96       	adiw	r26, 0x05	; 5
 1e8:	8c 93       	st	X, r24
 1ea:	15 97       	sbiw	r26, 0x05	; 5
	ReportData->RY = STICK_CENTER;
 1ec:	16 96       	adiw	r26, 0x06	; 6
 1ee:	8c 93       	st	X, r24
 1f0:	16 97       	sbiw	r26, 0x06	; 6
	ReportData->HAT = HAT_CENTER;
 1f2:	12 96       	adiw	r26, 0x02	; 2
 1f4:	9c 93       	st	X, r25
 1f6:	12 97       	sbiw	r26, 0x02	; 2

	// Repeat ECHOES times the last report
	if (echoes > 0)
 1f8:	80 91 b0 02 	lds	r24, 0x02B0
 1fc:	90 91 b1 02 	lds	r25, 0x02B1
 200:	18 16       	cp	r1, r24
 202:	19 06       	cpc	r1, r25
 204:	6c f4       	brge	.+26     	; 0x220 <GetNextReport+0x5a>
	{
		memcpy(ReportData, &last_report, sizeof(USB_JoystickReport_Input_t));
 206:	88 e0       	ldi	r24, 0x08	; 8
 208:	e3 eb       	ldi	r30, 0xB3	; 179
 20a:	f2 e0       	ldi	r31, 0x02	; 2
 20c:	01 90       	ld	r0, Z+
 20e:	0d 92       	st	X+, r0
 210:	8a 95       	dec	r24
 212:	e1 f7       	brne	.-8      	; 0x20c <GetNextReport+0x46>
		echoes--;
 214:	80 91 b0 02 	lds	r24, 0x02B0
 218:	90 91 b1 02 	lds	r25, 0x02B1
 21c:	01 97       	sbiw	r24, 0x01	; 1
 21e:	bb c0       	rjmp	.+374    	; 0x396 <__stack+0x97>
		return;
	}

	// States and moves management
	switch (state)
 220:	80 91 b2 02 	lds	r24, 0x02B2
 224:	82 30       	cpi	r24, 0x02	; 2
 226:	c1 f0       	breq	.+48     	; 0x258 <GetNextReport+0x92>
 228:	68 f4       	brcc	.+26     	; 0x244 <GetNextReport+0x7e>
 22a:	88 23       	and	r24, r24
 22c:	99 f0       	breq	.+38     	; 0x254 <GetNextReport+0x8e>
 22e:	81 30       	cpi	r24, 0x01	; 1
 230:	09 f0       	breq	.+2      	; 0x234 <GetNextReport+0x6e>
 232:	a7 c0       	rjmp	.+334    	; 0x382 <__stack+0x83>
		// 	}
		// 	report_count++;
		// 	break;

		case SYNC_POSITION:
			bufindex = 0;
 234:	10 92 a9 02 	sts	0x02A9, r1
 238:	10 92 a8 02 	sts	0x02A8, r1


			ReportData->Button = 0;
 23c:	11 96       	adiw	r26, 0x01	; 1
 23e:	1c 92       	st	X, r1
 240:	1e 92       	st	-X, r1
 242:	08 c0       	rjmp	.+16     	; 0x254 <GetNextReport+0x8e>
		echoes--;
		return;
	}

	// States and moves management
	switch (state)
 244:	84 30       	cpi	r24, 0x04	; 4
 246:	09 f4       	brne	.+2      	; 0x24a <GetNextReport+0x84>
 248:	99 c0       	rjmp	.+306    	; 0x37c <__stack+0x7d>
 24a:	40 f0       	brcs	.+16     	; 0x25c <GetNextReport+0x96>
 24c:	85 30       	cpi	r24, 0x05	; 5
 24e:	09 f4       	brne	.+2      	; 0x252 <GetNextReport+0x8c>
 250:	a6 c0       	rjmp	.+332    	; 0x39e <__stack+0x9f>
 252:	97 c0       	rjmp	.+302    	; 0x382 <__stack+0x83>
			ReportData->RX = STICK_CENTER;
			ReportData->RY = STICK_CENTER;
			ReportData->HAT = HAT_CENTER;


			state = BREATHE;
 254:	82 e0       	ldi	r24, 0x02	; 2
 256:	93 c0       	rjmp	.+294    	; 0x37e <__stack+0x7f>
			break;

		case BREATHE:
			state = PROCESS;
 258:	83 e0       	ldi	r24, 0x03	; 3
 25a:	91 c0       	rjmp	.+290    	; 0x37e <__stack+0x7f>
			break;

		case PROCESS:

			switch (step[bufindex].button)
 25c:	80 91 a8 02 	lds	r24, 0x02A8
 260:	90 91 a9 02 	lds	r25, 0x02A9
 264:	63 e0       	ldi	r22, 0x03	; 3
 266:	70 e0       	ldi	r23, 0x00	; 0
 268:	6f d5       	rcall	.+2782   	; 0xd48 <__mulhi3>
 26a:	80 50       	subi	r24, 0x00	; 0
 26c:	9f 4f       	sbci	r25, 0xFF	; 255
 26e:	ec 01       	movw	r28, r24
 270:	88 81       	ld	r24, Y
 272:	86 30       	cpi	r24, 0x06	; 6
 274:	59 f1       	breq	.+86     	; 0x2cc <GetNextReport+0x106>
 276:	60 f4       	brcc	.+24     	; 0x290 <GetNextReport+0xca>
 278:	81 30       	cpi	r24, 0x01	; 1
 27a:	19 f1       	breq	.+70     	; 0x2c2 <GetNextReport+0xfc>
 27c:	d0 f0       	brcs	.+52     	; 0x2b2 <GetNextReport+0xec>
 27e:	82 30       	cpi	r24, 0x02	; 2
 280:	e1 f0       	breq	.+56     	; 0x2ba <GetNextReport+0xf4>
 282:	83 30       	cpi	r24, 0x03	; 3
 284:	e1 f5       	brne	.+120    	; 0x2fe <GetNextReport+0x138>
				case DOWN:
					ReportData->LY = STICK_MAX;				
					break;

				case RIGHT:
					ReportData->LX = STICK_MAX;				
 286:	8f ef       	ldi	r24, 0xFF	; 255
 288:	13 96       	adiw	r26, 0x03	; 3
 28a:	8c 93       	st	X, r24
 28c:	13 97       	sbiw	r26, 0x03	; 3
					break;
 28e:	37 c0       	rjmp	.+110    	; 0x2fe <GetNextReport+0x138>
			state = PROCESS;
			break;

		case PROCESS:

			switch (step[bufindex].button)
 290:	8a 30       	cpi	r24, 0x0A	; 10
 292:	31 f1       	breq	.+76     	; 0x2e0 <GetNextReport+0x11a>
 294:	28 f4       	brcc	.+10     	; 0x2a0 <GetNextReport+0xda>
 296:	87 30       	cpi	r24, 0x07	; 7
 298:	f1 f0       	breq	.+60     	; 0x2d6 <GetNextReport+0x110>
 29a:	89 30       	cpi	r24, 0x09	; 9
 29c:	21 f1       	breq	.+72     	; 0x2e6 <GetNextReport+0x120>
 29e:	2f c0       	rjmp	.+94     	; 0x2fe <GetNextReport+0x138>
 2a0:	8c 30       	cpi	r24, 0x0C	; 12
 2a2:	31 f1       	breq	.+76     	; 0x2f0 <GetNextReport+0x12a>
 2a4:	8d 30       	cpi	r24, 0x0D	; 13
 2a6:	59 f5       	brne	.+86     	; 0x2fe <GetNextReport+0x138>
				case TRIGGERS:
					ReportData->Button |= SWITCH_L | SWITCH_R;
					break;
                    
                case HOME:
                    ReportData->Button |= SWITCH_HOME;
 2a8:	8d 91       	ld	r24, X+
 2aa:	9c 91       	ld	r25, X
 2ac:	11 97       	sbiw	r26, 0x01	; 1
 2ae:	90 61       	ori	r25, 0x10	; 16
 2b0:	23 c0       	rjmp	.+70     	; 0x2f8 <GetNextReport+0x132>

			switch (step[bufindex].button)
			{

				case UP:
					ReportData->LY = STICK_MIN;				
 2b2:	14 96       	adiw	r26, 0x04	; 4
 2b4:	1c 92       	st	X, r1
 2b6:	14 97       	sbiw	r26, 0x04	; 4
					break;
 2b8:	22 c0       	rjmp	.+68     	; 0x2fe <GetNextReport+0x138>

				case LEFT:
					ReportData->LX = STICK_MIN;				
 2ba:	13 96       	adiw	r26, 0x03	; 3
 2bc:	1c 92       	st	X, r1
 2be:	13 97       	sbiw	r26, 0x03	; 3
					break;
 2c0:	1e c0       	rjmp	.+60     	; 0x2fe <GetNextReport+0x138>

				case DOWN:
					ReportData->LY = STICK_MAX;				
 2c2:	8f ef       	ldi	r24, 0xFF	; 255
 2c4:	14 96       	adiw	r26, 0x04	; 4
 2c6:	8c 93       	st	X, r24
 2c8:	14 97       	sbiw	r26, 0x04	; 4
					break;
 2ca:	19 c0       	rjmp	.+50     	; 0x2fe <GetNextReport+0x138>
				case RIGHT:
					ReportData->LX = STICK_MAX;				
					break;

				case A:
					ReportData->Button |= SWITCH_A;
 2cc:	8d 91       	ld	r24, X+
 2ce:	9c 91       	ld	r25, X
 2d0:	11 97       	sbiw	r26, 0x01	; 1
 2d2:	84 60       	ori	r24, 0x04	; 4
 2d4:	11 c0       	rjmp	.+34     	; 0x2f8 <GetNextReport+0x132>
					break;

				case B:
					ReportData->Button |= SWITCH_B;
 2d6:	8d 91       	ld	r24, X+
 2d8:	9c 91       	ld	r25, X
 2da:	11 97       	sbiw	r26, 0x01	; 1
 2dc:	82 60       	ori	r24, 0x02	; 2
 2de:	0c c0       	rjmp	.+24     	; 0x2f8 <GetNextReport+0x132>
				case R:
					ReportData->Button |= SWITCH_R;
					break;

				case THROW:
					ReportData->LY = STICK_MIN;				
 2e0:	14 96       	adiw	r26, 0x04	; 4
 2e2:	1c 92       	st	X, r1
 2e4:	14 97       	sbiw	r26, 0x04	; 4
					ReportData->Button |= SWITCH_R;
 2e6:	8d 91       	ld	r24, X+
 2e8:	9c 91       	ld	r25, X
 2ea:	11 97       	sbiw	r26, 0x01	; 1
 2ec:	80 62       	ori	r24, 0x20	; 32
 2ee:	04 c0       	rjmp	.+8      	; 0x2f8 <GetNextReport+0x132>
					break;

				case TRIGGERS:
					ReportData->Button |= SWITCH_L | SWITCH_R;
 2f0:	8d 91       	ld	r24, X+
 2f2:	9c 91       	ld	r25, X
 2f4:	11 97       	sbiw	r26, 0x01	; 1
 2f6:	80 63       	ori	r24, 0x30	; 48
					break;
                    
                case HOME:
                    ReportData->Button |= SWITCH_HOME;
 2f8:	11 96       	adiw	r26, 0x01	; 1
 2fa:	9c 93       	st	X, r25
 2fc:	8e 93       	st	-X, r24
					ReportData->HAT = HAT_CENTER;
                    */
					break;
			}

			duration_count++;
 2fe:	20 91 a6 02 	lds	r18, 0x02A6
 302:	30 91 a7 02 	lds	r19, 0x02A7
 306:	2f 5f       	subi	r18, 0xFF	; 255
 308:	3f 4f       	sbci	r19, 0xFF	; 255
 30a:	30 93 a7 02 	sts	0x02A7, r19
 30e:	20 93 a6 02 	sts	0x02A6, r18

			if (duration_count > step[bufindex].duration)
 312:	e0 91 a8 02 	lds	r30, 0x02A8
 316:	f0 91 a9 02 	lds	r31, 0x02A9
 31a:	cf 01       	movw	r24, r30
 31c:	63 e0       	ldi	r22, 0x03	; 3
 31e:	70 e0       	ldi	r23, 0x00	; 0
 320:	13 d5       	rcall	.+2598   	; 0xd48 <__mulhi3>
 322:	80 50       	subi	r24, 0x00	; 0
 324:	9f 4f       	sbci	r25, 0xFF	; 255
 326:	ec 01       	movw	r28, r24
 328:	89 81       	ldd	r24, Y+1	; 0x01
 32a:	9a 81       	ldd	r25, Y+2	; 0x02
 32c:	82 17       	cp	r24, r18
 32e:	93 07       	cpc	r25, r19
 330:	48 f4       	brcc	.+18     	; 0x344 <__stack+0x45>
			{
				bufindex++;
 332:	31 96       	adiw	r30, 0x01	; 1
 334:	f0 93 a9 02 	sts	0x02A9, r31
 338:	e0 93 a8 02 	sts	0x02A8, r30
				duration_count = 0;				
 33c:	10 92 a7 02 	sts	0x02A7, r1
 340:	10 92 a6 02 	sts	0x02A6, r1
			}


			if (bufindex > (int)( sizeof(step) / sizeof(step[0])) - 1)
 344:	80 91 a8 02 	lds	r24, 0x02A8
 348:	90 91 a9 02 	lds	r25, 0x02A9
 34c:	8c 38       	cpi	r24, 0x8C	; 140
 34e:	91 05       	cpc	r25, r1
 350:	c4 f0       	brlt	.+48     	; 0x382 <__stack+0x83>
			{

				// state = CLEANUP;

				bufindex = 7;
 352:	87 e0       	ldi	r24, 0x07	; 7
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	90 93 a9 02 	sts	0x02A9, r25
 35a:	80 93 a8 02 	sts	0x02A8, r24
				duration_count = 0;
 35e:	10 92 a7 02 	sts	0x02A7, r1
 362:	10 92 a6 02 	sts	0x02A6, r1

				state = BREATHE;
 366:	82 e0       	ldi	r24, 0x02	; 2
 368:	80 93 b2 02 	sts	0x02B2, r24

				ReportData->LX = STICK_CENTER;
 36c:	80 e8       	ldi	r24, 0x80	; 128
 36e:	13 96       	adiw	r26, 0x03	; 3
 370:	8c 93       	st	X, r24
 372:	13 97       	sbiw	r26, 0x03	; 3
				ReportData->LY = STICK_CENTER;
 374:	14 96       	adiw	r26, 0x04	; 4
 376:	8c 93       	st	X, r24
 378:	14 97       	sbiw	r26, 0x04	; 4
 37a:	03 c0       	rjmp	.+6      	; 0x382 <__stack+0x83>
			}

			break;

		case CLEANUP:
			state = DONE;
 37c:	85 e0       	ldi	r24, 0x05	; 5
 37e:	80 93 b2 02 	sts	0x02B2, r24
	// if (state != SYNC_CONTROLLER && state != SYNC_POSITION)
	// 	if (pgm_read_byte(&(image_data[(xpos / 8) + (ypos * 40)])) & 1 << (xpos % 8))
	// 		ReportData->Button |= SWITCH_A;

	// Prepare to echo this report
	memcpy(&last_report, ReportData, sizeof(USB_JoystickReport_Input_t));
 382:	88 e0       	ldi	r24, 0x08	; 8
 384:	fd 01       	movw	r30, r26
 386:	a3 eb       	ldi	r26, 0xB3	; 179
 388:	b2 e0       	ldi	r27, 0x02	; 2
 38a:	01 90       	ld	r0, Z+
 38c:	0d 92       	st	X+, r0
 38e:	8a 95       	dec	r24
 390:	e1 f7       	brne	.-8      	; 0x38a <__stack+0x8b>
	echoes = ECHOES;
 392:	82 e0       	ldi	r24, 0x02	; 2
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	90 93 b1 02 	sts	0x02B1, r25
 39a:	80 93 b0 02 	sts	0x02B0, r24

}
 39e:	df 91       	pop	r29
 3a0:	cf 91       	pop	r28
 3a2:	08 95       	ret

000003a4 <HID_Task>:

	// Not used here, it looks like we don't receive control request from the Switch.
}

// Process and deliver data from IN and OUT endpoints.
void HID_Task(void) {
 3a4:	cf 93       	push	r28
 3a6:	df 93       	push	r29
 3a8:	cd b7       	in	r28, 0x3d	; 61
 3aa:	de b7       	in	r29, 0x3e	; 62
 3ac:	28 97       	sbiw	r28, 0x08	; 8
 3ae:	0f b6       	in	r0, 0x3f	; 63
 3b0:	f8 94       	cli
 3b2:	de bf       	out	0x3e, r29	; 62
 3b4:	0f be       	out	0x3f, r0	; 63
 3b6:	cd bf       	out	0x3d, r28	; 61
	// If the device isn't connected and properly configured, we can't do anything here.
	if (USB_DeviceState != DEVICE_STATE_Configured)
 3b8:	80 91 bf 02 	lds	r24, 0x02BF
 3bc:	84 30       	cpi	r24, 0x04	; 4
 3be:	89 f5       	brne	.+98     	; 0x422 <HID_Task+0x7e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 3c0:	82 e0       	ldi	r24, 0x02	; 2
 3c2:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 3c6:	80 91 e8 00 	lds	r24, 0x00E8
		return;

	// We'll start with the OUT endpoint.
	Endpoint_SelectEndpoint(JOYSTICK_OUT_EPADDR);
	// We'll check to see if we received something on the OUT endpoint.
	if (Endpoint_IsOUTReceived())
 3ca:	82 ff       	sbrs	r24, 2
 3cc:	12 c0       	rjmp	.+36     	; 0x3f2 <HID_Task+0x4e>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 3ce:	80 91 e8 00 	lds	r24, 0x00E8
	{
		// If we did, and the packet has data, we'll react to it.
		if (Endpoint_IsReadWriteAllowed())
 3d2:	85 ff       	sbrs	r24, 5
 3d4:	09 c0       	rjmp	.+18     	; 0x3e8 <HID_Task+0x44>
		{
			// We'll create a place to store our data received from the host.
			USB_JoystickReport_Output_t JoystickOutputData;
			// We'll then take in that data, setting it up in our storage.
			while(Endpoint_Read_Stream_LE(&JoystickOutputData, sizeof(JoystickOutputData), NULL) != ENDPOINT_RWSTREAM_NoError);
 3d6:	40 e0       	ldi	r20, 0x00	; 0
 3d8:	50 e0       	ldi	r21, 0x00	; 0
 3da:	67 e0       	ldi	r22, 0x07	; 7
 3dc:	70 e0       	ldi	r23, 0x00	; 0
 3de:	ce 01       	movw	r24, r28
 3e0:	01 96       	adiw	r24, 0x01	; 1
 3e2:	b8 d0       	rcall	.+368    	; 0x554 <Endpoint_Read_Stream_LE>
 3e4:	81 11       	cpse	r24, r1
 3e6:	f7 cf       	rjmp	.-18     	; 0x3d6 <HID_Task+0x32>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 3e8:	80 91 e8 00 	lds	r24, 0x00E8
 3ec:	8b 77       	andi	r24, 0x7B	; 123
 3ee:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 3f2:	81 e0       	ldi	r24, 0x01	; 1
 3f4:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 3f8:	80 91 e8 00 	lds	r24, 0x00E8
	}

	// We'll then move on to the IN endpoint.
	Endpoint_SelectEndpoint(JOYSTICK_IN_EPADDR);
	// We first check to see if the host is ready to accept data.
	if (Endpoint_IsINReady())
 3fc:	80 ff       	sbrs	r24, 0
 3fe:	11 c0       	rjmp	.+34     	; 0x422 <HID_Task+0x7e>
	{
		// We'll create an empty report.
		USB_JoystickReport_Input_t JoystickInputData;
		// We'll then populate this report with what we want to send to the host.
		GetNextReport(&JoystickInputData);
 400:	ce 01       	movw	r24, r28
 402:	01 96       	adiw	r24, 0x01	; 1
 404:	e0 de       	rcall	.-576    	; 0x1c6 <GetNextReport>
		// Once populated, we can output this data to the host. We do this by first writing the data to the control stream.
		while(Endpoint_Write_Stream_LE(&JoystickInputData, sizeof(JoystickInputData), NULL) != ENDPOINT_RWSTREAM_NoError);
 406:	40 e0       	ldi	r20, 0x00	; 0
 408:	50 e0       	ldi	r21, 0x00	; 0
 40a:	68 e0       	ldi	r22, 0x08	; 8
 40c:	70 e0       	ldi	r23, 0x00	; 0
 40e:	ce 01       	movw	r24, r28
 410:	01 96       	adiw	r24, 0x01	; 1
 412:	58 d0       	rcall	.+176    	; 0x4c4 <Endpoint_Write_Stream_LE>
 414:	81 11       	cpse	r24, r1
 416:	f7 cf       	rjmp	.-18     	; 0x406 <HID_Task+0x62>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 418:	80 91 e8 00 	lds	r24, 0x00E8
 41c:	8e 77       	andi	r24, 0x7E	; 126
 41e:	80 93 e8 00 	sts	0x00E8, r24
		// We then send an IN packet on this endpoint.
		Endpoint_ClearIN();
	}
}
 422:	28 96       	adiw	r28, 0x08	; 8
 424:	0f b6       	in	r0, 0x3f	; 63
 426:	f8 94       	cli
 428:	de bf       	out	0x3e, r29	; 62
 42a:	0f be       	out	0x3f, r0	; 63
 42c:	cd bf       	out	0x3d, r28	; 61
 42e:	df 91       	pop	r29
 430:	cf 91       	pop	r28
 432:	08 95       	ret

00000434 <main>:
};

// Main entry point.
int main(void) {
	// We'll start by performing hardware and peripheral setup.
	SetupHardware();
 434:	a8 de       	rcall	.-688    	; 0x186 <SetupHardware>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
 436:	78 94       	sei
	GlobalInterruptEnable();
	// Once that's done, we'll enter an infinite loop.
	for (;;)
	{
		// We need to run our task to process and deliver data for our IN and OUT endpoints.
		HID_Task();
 438:	b5 df       	rcall	.-150    	; 0x3a4 <HID_Task>
		// We also need to run the main USB management task.
		USB_USBTask();
 43a:	6a d4       	rcall	.+2260   	; 0xd10 <USB_USBTask>
 43c:	fd cf       	rjmp	.-6      	; 0x438 <main+0x4>

0000043e <CALLBACK_USB_GetDescriptor>:
 43e:	29 2f       	mov	r18, r25
 440:	33 27       	eor	r19, r19
 442:	23 30       	cpi	r18, 0x03	; 3
 444:	31 05       	cpc	r19, r1
 446:	b9 f0       	breq	.+46     	; 0x476 <CALLBACK_USB_GetDescriptor+0x38>
 448:	5c f4       	brge	.+22     	; 0x460 <CALLBACK_USB_GetDescriptor+0x22>
 44a:	21 30       	cpi	r18, 0x01	; 1
 44c:	31 05       	cpc	r19, r1
 44e:	69 f1       	breq	.+90     	; 0x4aa <CALLBACK_USB_GetDescriptor+0x6c>
 450:	22 30       	cpi	r18, 0x02	; 2
 452:	31 05       	cpc	r19, r1
 454:	79 f5       	brne	.+94     	; 0x4b4 <CALLBACK_USB_GetDescriptor+0x76>
 456:	89 e2       	ldi	r24, 0x29	; 41
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	2c eb       	ldi	r18, 0xBC	; 188
 45c:	30 e0       	ldi	r19, 0x00	; 0
 45e:	2e c0       	rjmp	.+92     	; 0x4bc <CALLBACK_USB_GetDescriptor+0x7e>
 460:	21 32       	cpi	r18, 0x21	; 33
 462:	31 05       	cpc	r19, r1
 464:	e9 f0       	breq	.+58     	; 0x4a0 <CALLBACK_USB_GetDescriptor+0x62>
 466:	22 32       	cpi	r18, 0x22	; 34
 468:	31 05       	cpc	r19, r1
 46a:	21 f5       	brne	.+72     	; 0x4b4 <CALLBACK_USB_GetDescriptor+0x76>
 46c:	86 e5       	ldi	r24, 0x56	; 86
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	27 ef       	ldi	r18, 0xF7	; 247
 472:	30 e0       	ldi	r19, 0x00	; 0
 474:	23 c0       	rjmp	.+70     	; 0x4bc <CALLBACK_USB_GetDescriptor+0x7e>
 476:	99 27       	eor	r25, r25
 478:	81 30       	cpi	r24, 0x01	; 1
 47a:	91 05       	cpc	r25, r1
 47c:	41 f0       	breq	.+16     	; 0x48e <CALLBACK_USB_GetDescriptor+0x50>
 47e:	82 30       	cpi	r24, 0x02	; 2
 480:	91 05       	cpc	r25, r1
 482:	41 f0       	breq	.+16     	; 0x494 <CALLBACK_USB_GetDescriptor+0x56>
 484:	89 2b       	or	r24, r25
 486:	b1 f4       	brne	.+44     	; 0x4b4 <CALLBACK_USB_GetDescriptor+0x76>
 488:	e8 eb       	ldi	r30, 0xB8	; 184
 48a:	f0 e0       	ldi	r31, 0x00	; 0
 48c:	05 c0       	rjmp	.+10     	; 0x498 <CALLBACK_USB_GetDescriptor+0x5a>
 48e:	ea e9       	ldi	r30, 0x9A	; 154
 490:	f0 e0       	ldi	r31, 0x00	; 0
 492:	02 c0       	rjmp	.+4      	; 0x498 <CALLBACK_USB_GetDescriptor+0x5a>
 494:	e4 e7       	ldi	r30, 0x74	; 116
 496:	f0 e0       	ldi	r31, 0x00	; 0
 498:	84 91       	lpm	r24, Z
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	9f 01       	movw	r18, r30
 49e:	0e c0       	rjmp	.+28     	; 0x4bc <CALLBACK_USB_GetDescriptor+0x7e>
 4a0:	89 e0       	ldi	r24, 0x09	; 9
 4a2:	90 e0       	ldi	r25, 0x00	; 0
 4a4:	2e ec       	ldi	r18, 0xCE	; 206
 4a6:	30 e0       	ldi	r19, 0x00	; 0
 4a8:	09 c0       	rjmp	.+18     	; 0x4bc <CALLBACK_USB_GetDescriptor+0x7e>
 4aa:	82 e1       	ldi	r24, 0x12	; 18
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	25 ee       	ldi	r18, 0xE5	; 229
 4b0:	30 e0       	ldi	r19, 0x00	; 0
 4b2:	04 c0       	rjmp	.+8      	; 0x4bc <CALLBACK_USB_GetDescriptor+0x7e>
 4b4:	80 e0       	ldi	r24, 0x00	; 0
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	20 e0       	ldi	r18, 0x00	; 0
 4ba:	30 e0       	ldi	r19, 0x00	; 0
 4bc:	fa 01       	movw	r30, r20
 4be:	31 83       	std	Z+1, r19	; 0x01
 4c0:	20 83       	st	Z, r18
 4c2:	08 95       	ret

000004c4 <Endpoint_Write_Stream_LE>:
 4c4:	cf 92       	push	r12
 4c6:	df 92       	push	r13
 4c8:	ef 92       	push	r14
 4ca:	ff 92       	push	r15
 4cc:	0f 93       	push	r16
 4ce:	1f 93       	push	r17
 4d0:	cf 93       	push	r28
 4d2:	df 93       	push	r29
 4d4:	7c 01       	movw	r14, r24
 4d6:	8b 01       	movw	r16, r22
 4d8:	ea 01       	movw	r28, r20
 4da:	a4 d1       	rcall	.+840    	; 0x824 <Endpoint_WaitUntilReady>
 4dc:	81 11       	cpse	r24, r1
 4de:	31 c0       	rjmp	.+98     	; 0x542 <Endpoint_Write_Stream_LE+0x7e>
 4e0:	20 97       	sbiw	r28, 0x00	; 0
 4e2:	31 f0       	breq	.+12     	; 0x4f0 <Endpoint_Write_Stream_LE+0x2c>
 4e4:	88 81       	ld	r24, Y
 4e6:	99 81       	ldd	r25, Y+1	; 0x01
 4e8:	08 1b       	sub	r16, r24
 4ea:	19 0b       	sbc	r17, r25
 4ec:	e8 0e       	add	r14, r24
 4ee:	f9 1e       	adc	r15, r25
 4f0:	c1 2c       	mov	r12, r1
 4f2:	d1 2c       	mov	r13, r1
 4f4:	01 15       	cp	r16, r1
 4f6:	11 05       	cpc	r17, r1
 4f8:	19 f1       	breq	.+70     	; 0x540 <Endpoint_Write_Stream_LE+0x7c>
 4fa:	80 91 e8 00 	lds	r24, 0x00E8
 4fe:	85 fd       	sbrc	r24, 5
 500:	14 c0       	rjmp	.+40     	; 0x52a <Endpoint_Write_Stream_LE+0x66>
 502:	80 91 e8 00 	lds	r24, 0x00E8
 506:	8e 77       	andi	r24, 0x7E	; 126
 508:	80 93 e8 00 	sts	0x00E8, r24
 50c:	01 d4       	rcall	.+2050   	; 0xd10 <USB_USBTask>
 50e:	20 97       	sbiw	r28, 0x00	; 0
 510:	41 f0       	breq	.+16     	; 0x522 <Endpoint_Write_Stream_LE+0x5e>
 512:	88 81       	ld	r24, Y
 514:	99 81       	ldd	r25, Y+1	; 0x01
 516:	8c 0d       	add	r24, r12
 518:	9d 1d       	adc	r25, r13
 51a:	99 83       	std	Y+1, r25	; 0x01
 51c:	88 83       	st	Y, r24
 51e:	85 e0       	ldi	r24, 0x05	; 5
 520:	10 c0       	rjmp	.+32     	; 0x542 <Endpoint_Write_Stream_LE+0x7e>
 522:	80 d1       	rcall	.+768    	; 0x824 <Endpoint_WaitUntilReady>
 524:	88 23       	and	r24, r24
 526:	31 f3       	breq	.-52     	; 0x4f4 <Endpoint_Write_Stream_LE+0x30>
 528:	0c c0       	rjmp	.+24     	; 0x542 <Endpoint_Write_Stream_LE+0x7e>
 52a:	f7 01       	movw	r30, r14
 52c:	81 91       	ld	r24, Z+
 52e:	7f 01       	movw	r14, r30
 530:	80 93 f1 00 	sts	0x00F1, r24
 534:	01 50       	subi	r16, 0x01	; 1
 536:	11 09       	sbc	r17, r1
 538:	ff ef       	ldi	r31, 0xFF	; 255
 53a:	cf 1a       	sub	r12, r31
 53c:	df 0a       	sbc	r13, r31
 53e:	da cf       	rjmp	.-76     	; 0x4f4 <Endpoint_Write_Stream_LE+0x30>
 540:	80 e0       	ldi	r24, 0x00	; 0
 542:	df 91       	pop	r29
 544:	cf 91       	pop	r28
 546:	1f 91       	pop	r17
 548:	0f 91       	pop	r16
 54a:	ff 90       	pop	r15
 54c:	ef 90       	pop	r14
 54e:	df 90       	pop	r13
 550:	cf 90       	pop	r12
 552:	08 95       	ret

00000554 <Endpoint_Read_Stream_LE>:
 554:	cf 92       	push	r12
 556:	df 92       	push	r13
 558:	ef 92       	push	r14
 55a:	ff 92       	push	r15
 55c:	0f 93       	push	r16
 55e:	1f 93       	push	r17
 560:	cf 93       	push	r28
 562:	df 93       	push	r29
 564:	7c 01       	movw	r14, r24
 566:	8b 01       	movw	r16, r22
 568:	ea 01       	movw	r28, r20
 56a:	5c d1       	rcall	.+696    	; 0x824 <Endpoint_WaitUntilReady>
 56c:	81 11       	cpse	r24, r1
 56e:	31 c0       	rjmp	.+98     	; 0x5d2 <Endpoint_Read_Stream_LE+0x7e>
 570:	20 97       	sbiw	r28, 0x00	; 0
 572:	31 f0       	breq	.+12     	; 0x580 <Endpoint_Read_Stream_LE+0x2c>
 574:	88 81       	ld	r24, Y
 576:	99 81       	ldd	r25, Y+1	; 0x01
 578:	08 1b       	sub	r16, r24
 57a:	19 0b       	sbc	r17, r25
 57c:	e8 0e       	add	r14, r24
 57e:	f9 1e       	adc	r15, r25
 580:	c1 2c       	mov	r12, r1
 582:	d1 2c       	mov	r13, r1
 584:	01 15       	cp	r16, r1
 586:	11 05       	cpc	r17, r1
 588:	19 f1       	breq	.+70     	; 0x5d0 <Endpoint_Read_Stream_LE+0x7c>
 58a:	80 91 e8 00 	lds	r24, 0x00E8
 58e:	85 fd       	sbrc	r24, 5
 590:	14 c0       	rjmp	.+40     	; 0x5ba <Endpoint_Read_Stream_LE+0x66>
 592:	80 91 e8 00 	lds	r24, 0x00E8
 596:	8b 77       	andi	r24, 0x7B	; 123
 598:	80 93 e8 00 	sts	0x00E8, r24
 59c:	b9 d3       	rcall	.+1906   	; 0xd10 <USB_USBTask>
 59e:	20 97       	sbiw	r28, 0x00	; 0
 5a0:	41 f0       	breq	.+16     	; 0x5b2 <Endpoint_Read_Stream_LE+0x5e>
 5a2:	88 81       	ld	r24, Y
 5a4:	99 81       	ldd	r25, Y+1	; 0x01
 5a6:	8c 0d       	add	r24, r12
 5a8:	9d 1d       	adc	r25, r13
 5aa:	99 83       	std	Y+1, r25	; 0x01
 5ac:	88 83       	st	Y, r24
 5ae:	85 e0       	ldi	r24, 0x05	; 5
 5b0:	10 c0       	rjmp	.+32     	; 0x5d2 <Endpoint_Read_Stream_LE+0x7e>
 5b2:	38 d1       	rcall	.+624    	; 0x824 <Endpoint_WaitUntilReady>
 5b4:	88 23       	and	r24, r24
 5b6:	31 f3       	breq	.-52     	; 0x584 <Endpoint_Read_Stream_LE+0x30>
 5b8:	0c c0       	rjmp	.+24     	; 0x5d2 <Endpoint_Read_Stream_LE+0x7e>
 5ba:	80 91 f1 00 	lds	r24, 0x00F1
 5be:	f7 01       	movw	r30, r14
 5c0:	81 93       	st	Z+, r24
 5c2:	7f 01       	movw	r14, r30
 5c4:	01 50       	subi	r16, 0x01	; 1
 5c6:	11 09       	sbc	r17, r1
 5c8:	ff ef       	ldi	r31, 0xFF	; 255
 5ca:	cf 1a       	sub	r12, r31
 5cc:	df 0a       	sbc	r13, r31
 5ce:	da cf       	rjmp	.-76     	; 0x584 <Endpoint_Read_Stream_LE+0x30>
 5d0:	80 e0       	ldi	r24, 0x00	; 0
 5d2:	df 91       	pop	r29
 5d4:	cf 91       	pop	r28
 5d6:	1f 91       	pop	r17
 5d8:	0f 91       	pop	r16
 5da:	ff 90       	pop	r15
 5dc:	ef 90       	pop	r14
 5de:	df 90       	pop	r13
 5e0:	cf 90       	pop	r12
 5e2:	08 95       	ret

000005e4 <Endpoint_Write_Control_Stream_LE>:
 5e4:	20 91 c6 02 	lds	r18, 0x02C6
 5e8:	30 91 c7 02 	lds	r19, 0x02C7
 5ec:	26 17       	cp	r18, r22
 5ee:	37 07       	cpc	r19, r23
 5f0:	48 f0       	brcs	.+18     	; 0x604 <Endpoint_Write_Control_Stream_LE+0x20>
 5f2:	61 15       	cp	r22, r1
 5f4:	71 05       	cpc	r23, r1
 5f6:	39 f4       	brne	.+14     	; 0x606 <Endpoint_Write_Control_Stream_LE+0x22>
 5f8:	20 91 e8 00 	lds	r18, 0x00E8
 5fc:	2e 77       	andi	r18, 0x7E	; 126
 5fe:	20 93 e8 00 	sts	0x00E8, r18
 602:	01 c0       	rjmp	.+2      	; 0x606 <Endpoint_Write_Control_Stream_LE+0x22>
 604:	b9 01       	movw	r22, r18
 606:	20 e0       	ldi	r18, 0x00	; 0
 608:	61 15       	cp	r22, r1
 60a:	71 05       	cpc	r23, r1
 60c:	d9 f1       	breq	.+118    	; 0x684 <Endpoint_Write_Control_Stream_LE+0xa0>
 60e:	30 91 bf 02 	lds	r19, 0x02BF
 612:	33 23       	and	r19, r19
 614:	09 f4       	brne	.+2      	; 0x618 <Endpoint_Write_Control_Stream_LE+0x34>
 616:	44 c0       	rjmp	.+136    	; 0x6a0 <Endpoint_Write_Control_Stream_LE+0xbc>
 618:	35 30       	cpi	r19, 0x05	; 5
 61a:	09 f4       	brne	.+2      	; 0x61e <Endpoint_Write_Control_Stream_LE+0x3a>
 61c:	43 c0       	rjmp	.+134    	; 0x6a4 <Endpoint_Write_Control_Stream_LE+0xc0>
 61e:	30 91 e8 00 	lds	r19, 0x00E8
 622:	33 fd       	sbrc	r19, 3
 624:	41 c0       	rjmp	.+130    	; 0x6a8 <Endpoint_Write_Control_Stream_LE+0xc4>
 626:	30 91 e8 00 	lds	r19, 0x00E8
 62a:	32 ff       	sbrs	r19, 2
 62c:	06 c0       	rjmp	.+12     	; 0x63a <Endpoint_Write_Control_Stream_LE+0x56>
 62e:	80 91 e8 00 	lds	r24, 0x00E8
 632:	82 ff       	sbrs	r24, 2
 634:	2a c0       	rjmp	.+84     	; 0x68a <Endpoint_Write_Control_Stream_LE+0xa6>
 636:	80 e0       	ldi	r24, 0x00	; 0
 638:	08 95       	ret
 63a:	30 91 e8 00 	lds	r19, 0x00E8
 63e:	30 ff       	sbrs	r19, 0
 640:	e3 cf       	rjmp	.-58     	; 0x608 <Endpoint_Write_Control_Stream_LE+0x24>
 642:	20 91 f2 00 	lds	r18, 0x00F2
 646:	30 e0       	ldi	r19, 0x00	; 0
 648:	fc 01       	movw	r30, r24
 64a:	28 1b       	sub	r18, r24
 64c:	39 0b       	sbc	r19, r25
 64e:	cf 01       	movw	r24, r30
 650:	82 0f       	add	r24, r18
 652:	93 1f       	adc	r25, r19
 654:	61 15       	cp	r22, r1
 656:	71 05       	cpc	r23, r1
 658:	49 f0       	breq	.+18     	; 0x66c <Endpoint_Write_Control_Stream_LE+0x88>
 65a:	80 34       	cpi	r24, 0x40	; 64
 65c:	91 05       	cpc	r25, r1
 65e:	30 f4       	brcc	.+12     	; 0x66c <Endpoint_Write_Control_Stream_LE+0x88>
 660:	81 91       	ld	r24, Z+
 662:	80 93 f1 00 	sts	0x00F1, r24
 666:	61 50       	subi	r22, 0x01	; 1
 668:	71 09       	sbc	r23, r1
 66a:	f1 cf       	rjmp	.-30     	; 0x64e <Endpoint_Write_Control_Stream_LE+0x6a>
 66c:	21 e0       	ldi	r18, 0x01	; 1
 66e:	80 34       	cpi	r24, 0x40	; 64
 670:	91 05       	cpc	r25, r1
 672:	09 f0       	breq	.+2      	; 0x676 <Endpoint_Write_Control_Stream_LE+0x92>
 674:	20 e0       	ldi	r18, 0x00	; 0
 676:	80 91 e8 00 	lds	r24, 0x00E8
 67a:	8e 77       	andi	r24, 0x7E	; 126
 67c:	80 93 e8 00 	sts	0x00E8, r24
 680:	cf 01       	movw	r24, r30
 682:	c2 cf       	rjmp	.-124    	; 0x608 <Endpoint_Write_Control_Stream_LE+0x24>
 684:	21 11       	cpse	r18, r1
 686:	c3 cf       	rjmp	.-122    	; 0x60e <Endpoint_Write_Control_Stream_LE+0x2a>
 688:	d2 cf       	rjmp	.-92     	; 0x62e <Endpoint_Write_Control_Stream_LE+0x4a>
 68a:	80 91 bf 02 	lds	r24, 0x02BF
 68e:	88 23       	and	r24, r24
 690:	39 f0       	breq	.+14     	; 0x6a0 <Endpoint_Write_Control_Stream_LE+0xbc>
 692:	85 30       	cpi	r24, 0x05	; 5
 694:	39 f0       	breq	.+14     	; 0x6a4 <Endpoint_Write_Control_Stream_LE+0xc0>
 696:	80 91 e8 00 	lds	r24, 0x00E8
 69a:	83 ff       	sbrs	r24, 3
 69c:	c8 cf       	rjmp	.-112    	; 0x62e <Endpoint_Write_Control_Stream_LE+0x4a>
 69e:	04 c0       	rjmp	.+8      	; 0x6a8 <Endpoint_Write_Control_Stream_LE+0xc4>
 6a0:	82 e0       	ldi	r24, 0x02	; 2
 6a2:	08 95       	ret
 6a4:	83 e0       	ldi	r24, 0x03	; 3
 6a6:	08 95       	ret
 6a8:	81 e0       	ldi	r24, 0x01	; 1
 6aa:	08 95       	ret

000006ac <Endpoint_Write_Control_PStream_LE>:
 6ac:	20 91 c6 02 	lds	r18, 0x02C6
 6b0:	30 91 c7 02 	lds	r19, 0x02C7
 6b4:	26 17       	cp	r18, r22
 6b6:	37 07       	cpc	r19, r23
 6b8:	48 f0       	brcs	.+18     	; 0x6cc <Endpoint_Write_Control_PStream_LE+0x20>
 6ba:	61 15       	cp	r22, r1
 6bc:	71 05       	cpc	r23, r1
 6be:	39 f4       	brne	.+14     	; 0x6ce <Endpoint_Write_Control_PStream_LE+0x22>
 6c0:	20 91 e8 00 	lds	r18, 0x00E8
 6c4:	2e 77       	andi	r18, 0x7E	; 126
 6c6:	20 93 e8 00 	sts	0x00E8, r18
 6ca:	01 c0       	rjmp	.+2      	; 0x6ce <Endpoint_Write_Control_PStream_LE+0x22>
 6cc:	b9 01       	movw	r22, r18
 6ce:	20 e0       	ldi	r18, 0x00	; 0
 6d0:	61 15       	cp	r22, r1
 6d2:	71 05       	cpc	r23, r1
 6d4:	09 f4       	brne	.+2      	; 0x6d8 <Endpoint_Write_Control_PStream_LE+0x2c>
 6d6:	3c c0       	rjmp	.+120    	; 0x750 <Endpoint_Write_Control_PStream_LE+0xa4>
 6d8:	30 91 bf 02 	lds	r19, 0x02BF
 6dc:	33 23       	and	r19, r19
 6de:	09 f4       	brne	.+2      	; 0x6e2 <Endpoint_Write_Control_PStream_LE+0x36>
 6e0:	45 c0       	rjmp	.+138    	; 0x76c <Endpoint_Write_Control_PStream_LE+0xc0>
 6e2:	35 30       	cpi	r19, 0x05	; 5
 6e4:	09 f4       	brne	.+2      	; 0x6e8 <Endpoint_Write_Control_PStream_LE+0x3c>
 6e6:	44 c0       	rjmp	.+136    	; 0x770 <Endpoint_Write_Control_PStream_LE+0xc4>
 6e8:	30 91 e8 00 	lds	r19, 0x00E8
 6ec:	33 fd       	sbrc	r19, 3
 6ee:	42 c0       	rjmp	.+132    	; 0x774 <Endpoint_Write_Control_PStream_LE+0xc8>
 6f0:	30 91 e8 00 	lds	r19, 0x00E8
 6f4:	32 ff       	sbrs	r19, 2
 6f6:	06 c0       	rjmp	.+12     	; 0x704 <Endpoint_Write_Control_PStream_LE+0x58>
 6f8:	80 91 e8 00 	lds	r24, 0x00E8
 6fc:	82 ff       	sbrs	r24, 2
 6fe:	2b c0       	rjmp	.+86     	; 0x756 <Endpoint_Write_Control_PStream_LE+0xaa>
 700:	80 e0       	ldi	r24, 0x00	; 0
 702:	08 95       	ret
 704:	30 91 e8 00 	lds	r19, 0x00E8
 708:	30 ff       	sbrs	r19, 0
 70a:	e2 cf       	rjmp	.-60     	; 0x6d0 <Endpoint_Write_Control_PStream_LE+0x24>
 70c:	20 91 f2 00 	lds	r18, 0x00F2
 710:	30 e0       	ldi	r19, 0x00	; 0
 712:	fc 01       	movw	r30, r24
 714:	28 1b       	sub	r18, r24
 716:	39 0b       	sbc	r19, r25
 718:	c9 01       	movw	r24, r18
 71a:	8e 0f       	add	r24, r30
 71c:	9f 1f       	adc	r25, r31
 71e:	61 15       	cp	r22, r1
 720:	71 05       	cpc	r23, r1
 722:	51 f0       	breq	.+20     	; 0x738 <Endpoint_Write_Control_PStream_LE+0x8c>
 724:	80 34       	cpi	r24, 0x40	; 64
 726:	91 05       	cpc	r25, r1
 728:	38 f4       	brcc	.+14     	; 0x738 <Endpoint_Write_Control_PStream_LE+0x8c>
 72a:	84 91       	lpm	r24, Z
 72c:	80 93 f1 00 	sts	0x00F1, r24
 730:	31 96       	adiw	r30, 0x01	; 1
 732:	61 50       	subi	r22, 0x01	; 1
 734:	71 09       	sbc	r23, r1
 736:	f0 cf       	rjmp	.-32     	; 0x718 <Endpoint_Write_Control_PStream_LE+0x6c>
 738:	21 e0       	ldi	r18, 0x01	; 1
 73a:	80 34       	cpi	r24, 0x40	; 64
 73c:	91 05       	cpc	r25, r1
 73e:	09 f0       	breq	.+2      	; 0x742 <Endpoint_Write_Control_PStream_LE+0x96>
 740:	20 e0       	ldi	r18, 0x00	; 0
 742:	80 91 e8 00 	lds	r24, 0x00E8
 746:	8e 77       	andi	r24, 0x7E	; 126
 748:	80 93 e8 00 	sts	0x00E8, r24
 74c:	cf 01       	movw	r24, r30
 74e:	c0 cf       	rjmp	.-128    	; 0x6d0 <Endpoint_Write_Control_PStream_LE+0x24>
 750:	21 11       	cpse	r18, r1
 752:	c2 cf       	rjmp	.-124    	; 0x6d8 <Endpoint_Write_Control_PStream_LE+0x2c>
 754:	d1 cf       	rjmp	.-94     	; 0x6f8 <Endpoint_Write_Control_PStream_LE+0x4c>
 756:	80 91 bf 02 	lds	r24, 0x02BF
 75a:	88 23       	and	r24, r24
 75c:	39 f0       	breq	.+14     	; 0x76c <Endpoint_Write_Control_PStream_LE+0xc0>
 75e:	85 30       	cpi	r24, 0x05	; 5
 760:	39 f0       	breq	.+14     	; 0x770 <Endpoint_Write_Control_PStream_LE+0xc4>
 762:	80 91 e8 00 	lds	r24, 0x00E8
 766:	83 ff       	sbrs	r24, 3
 768:	c7 cf       	rjmp	.-114    	; 0x6f8 <Endpoint_Write_Control_PStream_LE+0x4c>
 76a:	04 c0       	rjmp	.+8      	; 0x774 <Endpoint_Write_Control_PStream_LE+0xc8>
 76c:	82 e0       	ldi	r24, 0x02	; 2
 76e:	08 95       	ret
 770:	83 e0       	ldi	r24, 0x03	; 3
 772:	08 95       	ret
 774:	81 e0       	ldi	r24, 0x01	; 1
 776:	08 95       	ret

00000778 <Endpoint_ConfigureEndpoint_Prv>:
 778:	98 2f       	mov	r25, r24
 77a:	95 30       	cpi	r25, 0x05	; 5
 77c:	58 f5       	brcc	.+86     	; 0x7d4 <Endpoint_ConfigureEndpoint_Prv+0x5c>
 77e:	90 93 e9 00 	sts	0x00E9, r25
 782:	98 17       	cp	r25, r24
 784:	39 f0       	breq	.+14     	; 0x794 <Endpoint_ConfigureEndpoint_Prv+0x1c>
 786:	70 91 ec 00 	lds	r23, 0x00EC
 78a:	20 91 ed 00 	lds	r18, 0x00ED
 78e:	50 91 f0 00 	lds	r21, 0x00F0
 792:	03 c0       	rjmp	.+6      	; 0x79a <Endpoint_ConfigureEndpoint_Prv+0x22>
 794:	24 2f       	mov	r18, r20
 796:	76 2f       	mov	r23, r22
 798:	50 e0       	ldi	r21, 0x00	; 0
 79a:	21 ff       	sbrs	r18, 1
 79c:	19 c0       	rjmp	.+50     	; 0x7d0 <Endpoint_ConfigureEndpoint_Prv+0x58>
 79e:	30 91 eb 00 	lds	r19, 0x00EB
 7a2:	3e 7f       	andi	r19, 0xFE	; 254
 7a4:	30 93 eb 00 	sts	0x00EB, r19
 7a8:	30 91 ed 00 	lds	r19, 0x00ED
 7ac:	3d 7f       	andi	r19, 0xFD	; 253
 7ae:	30 93 ed 00 	sts	0x00ED, r19
 7b2:	30 91 eb 00 	lds	r19, 0x00EB
 7b6:	31 60       	ori	r19, 0x01	; 1
 7b8:	30 93 eb 00 	sts	0x00EB, r19
 7bc:	70 93 ec 00 	sts	0x00EC, r23
 7c0:	20 93 ed 00 	sts	0x00ED, r18
 7c4:	50 93 f0 00 	sts	0x00F0, r21
 7c8:	20 91 ee 00 	lds	r18, 0x00EE
 7cc:	27 ff       	sbrs	r18, 7
 7ce:	07 c0       	rjmp	.+14     	; 0x7de <Endpoint_ConfigureEndpoint_Prv+0x66>
 7d0:	9f 5f       	subi	r25, 0xFF	; 255
 7d2:	d3 cf       	rjmp	.-90     	; 0x77a <Endpoint_ConfigureEndpoint_Prv+0x2>
 7d4:	8f 70       	andi	r24, 0x0F	; 15
 7d6:	80 93 e9 00 	sts	0x00E9, r24
 7da:	81 e0       	ldi	r24, 0x01	; 1
 7dc:	08 95       	ret
 7de:	80 e0       	ldi	r24, 0x00	; 0
 7e0:	08 95       	ret

000007e2 <Endpoint_ClearStatusStage>:
 7e2:	80 91 c0 02 	lds	r24, 0x02C0
 7e6:	87 fd       	sbrc	r24, 7
 7e8:	05 c0       	rjmp	.+10     	; 0x7f4 <Endpoint_ClearStatusStage+0x12>
 7ea:	80 91 e8 00 	lds	r24, 0x00E8
 7ee:	80 ff       	sbrs	r24, 0
 7f0:	0e c0       	rjmp	.+28     	; 0x80e <Endpoint_ClearStatusStage+0x2c>
 7f2:	12 c0       	rjmp	.+36     	; 0x818 <Endpoint_ClearStatusStage+0x36>
 7f4:	80 91 e8 00 	lds	r24, 0x00E8
 7f8:	82 fd       	sbrc	r24, 2
 7fa:	05 c0       	rjmp	.+10     	; 0x806 <Endpoint_ClearStatusStage+0x24>
 7fc:	80 91 bf 02 	lds	r24, 0x02BF
 800:	81 11       	cpse	r24, r1
 802:	f8 cf       	rjmp	.-16     	; 0x7f4 <Endpoint_ClearStatusStage+0x12>
 804:	08 95       	ret
 806:	80 91 e8 00 	lds	r24, 0x00E8
 80a:	8b 77       	andi	r24, 0x7B	; 123
 80c:	08 c0       	rjmp	.+16     	; 0x81e <Endpoint_ClearStatusStage+0x3c>
 80e:	80 91 bf 02 	lds	r24, 0x02BF
 812:	81 11       	cpse	r24, r1
 814:	ea cf       	rjmp	.-44     	; 0x7ea <Endpoint_ClearStatusStage+0x8>
 816:	08 95       	ret
 818:	80 91 e8 00 	lds	r24, 0x00E8
 81c:	8e 77       	andi	r24, 0x7E	; 126
 81e:	80 93 e8 00 	sts	0x00E8, r24
 822:	08 95       	ret

00000824 <Endpoint_WaitUntilReady>:
 824:	80 91 e4 00 	lds	r24, 0x00E4
 828:	90 91 e5 00 	lds	r25, 0x00E5
 82c:	45 e6       	ldi	r20, 0x65	; 101
 82e:	20 91 ec 00 	lds	r18, 0x00EC
 832:	20 ff       	sbrs	r18, 0
 834:	21 c0       	rjmp	.+66     	; 0x878 <Endpoint_WaitUntilReady+0x54>
 836:	20 91 e8 00 	lds	r18, 0x00E8
 83a:	20 fd       	sbrc	r18, 0
 83c:	21 c0       	rjmp	.+66     	; 0x880 <Endpoint_WaitUntilReady+0x5c>
 83e:	20 91 bf 02 	lds	r18, 0x02BF
 842:	22 23       	and	r18, r18
 844:	89 f0       	breq	.+34     	; 0x868 <Endpoint_WaitUntilReady+0x44>
 846:	25 30       	cpi	r18, 0x05	; 5
 848:	89 f0       	breq	.+34     	; 0x86c <Endpoint_WaitUntilReady+0x48>
 84a:	20 91 eb 00 	lds	r18, 0x00EB
 84e:	25 fd       	sbrc	r18, 5
 850:	0f c0       	rjmp	.+30     	; 0x870 <Endpoint_WaitUntilReady+0x4c>
 852:	20 91 e4 00 	lds	r18, 0x00E4
 856:	30 91 e5 00 	lds	r19, 0x00E5
 85a:	28 17       	cp	r18, r24
 85c:	39 07       	cpc	r19, r25
 85e:	39 f3       	breq	.-50     	; 0x82e <Endpoint_WaitUntilReady+0xa>
 860:	41 50       	subi	r20, 0x01	; 1
 862:	41 f0       	breq	.+16     	; 0x874 <Endpoint_WaitUntilReady+0x50>
 864:	c9 01       	movw	r24, r18
 866:	e3 cf       	rjmp	.-58     	; 0x82e <Endpoint_WaitUntilReady+0xa>
 868:	82 e0       	ldi	r24, 0x02	; 2
 86a:	08 95       	ret
 86c:	83 e0       	ldi	r24, 0x03	; 3
 86e:	08 95       	ret
 870:	81 e0       	ldi	r24, 0x01	; 1
 872:	08 95       	ret
 874:	84 e0       	ldi	r24, 0x04	; 4
 876:	08 95       	ret
 878:	20 91 e8 00 	lds	r18, 0x00E8
 87c:	22 ff       	sbrs	r18, 2
 87e:	df cf       	rjmp	.-66     	; 0x83e <Endpoint_WaitUntilReady+0x1a>
 880:	80 e0       	ldi	r24, 0x00	; 0
 882:	08 95       	ret

00000884 <USB_ResetInterface>:
 884:	41 d0       	rcall	.+130    	; 0x908 <USB_INT_DisableAllInterrupts>
 886:	43 d0       	rcall	.+134    	; 0x90e <USB_INT_ClearAllInterrupts>
 888:	80 91 d8 00 	lds	r24, 0x00D8
 88c:	8f 77       	andi	r24, 0x7F	; 127
 88e:	80 93 d8 00 	sts	0x00D8, r24
 892:	80 91 d8 00 	lds	r24, 0x00D8
 896:	80 68       	ori	r24, 0x80	; 128
 898:	80 93 d8 00 	sts	0x00D8, r24
 89c:	80 91 d8 00 	lds	r24, 0x00D8
 8a0:	8f 7d       	andi	r24, 0xDF	; 223
 8a2:	80 93 d8 00 	sts	0x00D8, r24
 8a6:	84 e0       	ldi	r24, 0x04	; 4
 8a8:	89 bd       	out	0x29, r24	; 41
 8aa:	86 e0       	ldi	r24, 0x06	; 6
 8ac:	89 bd       	out	0x29, r24	; 41
 8ae:	09 b4       	in	r0, 0x29	; 41
 8b0:	00 fe       	sbrs	r0, 0
 8b2:	fd cf       	rjmp	.-6      	; 0x8ae <USB_ResetInterface+0x2a>
 8b4:	10 92 bf 02 	sts	0x02BF, r1
 8b8:	10 92 bb 02 	sts	0x02BB, r1
 8bc:	10 92 bd 02 	sts	0x02BD, r1
 8c0:	10 92 bc 02 	sts	0x02BC, r1
 8c4:	42 e3       	ldi	r20, 0x32	; 50
 8c6:	60 e0       	ldi	r22, 0x00	; 0
 8c8:	80 e0       	ldi	r24, 0x00	; 0
 8ca:	56 df       	rcall	.-340    	; 0x778 <Endpoint_ConfigureEndpoint_Prv>
 8cc:	80 91 e1 00 	lds	r24, 0x00E1
 8d0:	8e 7f       	andi	r24, 0xFE	; 254
 8d2:	80 93 e1 00 	sts	0x00E1, r24
 8d6:	80 91 e2 00 	lds	r24, 0x00E2
 8da:	81 60       	ori	r24, 0x01	; 1
 8dc:	80 93 e2 00 	sts	0x00E2, r24
 8e0:	80 91 e2 00 	lds	r24, 0x00E2
 8e4:	88 60       	ori	r24, 0x08	; 8
 8e6:	80 93 e2 00 	sts	0x00E2, r24
 8ea:	80 91 e0 00 	lds	r24, 0x00E0
 8ee:	8e 7f       	andi	r24, 0xFE	; 254
 8f0:	80 93 e0 00 	sts	0x00E0, r24
 8f4:	08 95       	ret

000008f6 <USB_Init>:
 8f6:	e3 e6       	ldi	r30, 0x63	; 99
 8f8:	f0 e0       	ldi	r31, 0x00	; 0
 8fa:	80 81       	ld	r24, Z
 8fc:	8e 7f       	andi	r24, 0xFE	; 254
 8fe:	80 83       	st	Z, r24
 900:	81 e0       	ldi	r24, 0x01	; 1
 902:	80 93 be 02 	sts	0x02BE, r24
 906:	be cf       	rjmp	.-132    	; 0x884 <USB_ResetInterface>

00000908 <USB_INT_DisableAllInterrupts>:
 908:	10 92 e2 00 	sts	0x00E2, r1
 90c:	08 95       	ret

0000090e <USB_INT_ClearAllInterrupts>:
 90e:	10 92 e1 00 	sts	0x00E1, r1
 912:	08 95       	ret

00000914 <__vector_11>:
 914:	1f 92       	push	r1
 916:	0f 92       	push	r0
 918:	0f b6       	in	r0, 0x3f	; 63
 91a:	0f 92       	push	r0
 91c:	11 24       	eor	r1, r1
 91e:	2f 93       	push	r18
 920:	3f 93       	push	r19
 922:	4f 93       	push	r20
 924:	5f 93       	push	r21
 926:	6f 93       	push	r22
 928:	7f 93       	push	r23
 92a:	8f 93       	push	r24
 92c:	9f 93       	push	r25
 92e:	af 93       	push	r26
 930:	bf 93       	push	r27
 932:	ef 93       	push	r30
 934:	ff 93       	push	r31
 936:	80 91 e1 00 	lds	r24, 0x00E1
 93a:	82 ff       	sbrs	r24, 2
 93c:	0a c0       	rjmp	.+20     	; 0x952 <__vector_11+0x3e>
 93e:	80 91 e2 00 	lds	r24, 0x00E2
 942:	82 ff       	sbrs	r24, 2
 944:	06 c0       	rjmp	.+12     	; 0x952 <__vector_11+0x3e>
 946:	80 91 e1 00 	lds	r24, 0x00E1
 94a:	8b 7f       	andi	r24, 0xFB	; 251
 94c:	80 93 e1 00 	sts	0x00E1, r24
 950:	de d1       	rcall	.+956    	; 0xd0e <USB_Event_Stub>
 952:	80 91 e1 00 	lds	r24, 0x00E1
 956:	80 ff       	sbrs	r24, 0
 958:	17 c0       	rjmp	.+46     	; 0x988 <__vector_11+0x74>
 95a:	80 91 e2 00 	lds	r24, 0x00E2
 95e:	80 ff       	sbrs	r24, 0
 960:	13 c0       	rjmp	.+38     	; 0x988 <__vector_11+0x74>
 962:	80 91 e2 00 	lds	r24, 0x00E2
 966:	8e 7f       	andi	r24, 0xFE	; 254
 968:	80 93 e2 00 	sts	0x00E2, r24
 96c:	80 91 e2 00 	lds	r24, 0x00E2
 970:	80 61       	ori	r24, 0x10	; 16
 972:	80 93 e2 00 	sts	0x00E2, r24
 976:	80 91 d8 00 	lds	r24, 0x00D8
 97a:	80 62       	ori	r24, 0x20	; 32
 97c:	80 93 d8 00 	sts	0x00D8, r24
 980:	19 bc       	out	0x29, r1	; 41
 982:	10 92 bf 02 	sts	0x02BF, r1
 986:	15 dc       	rcall	.-2006   	; 0x1b2 <EVENT_USB_Device_Disconnect>
 988:	80 91 e1 00 	lds	r24, 0x00E1
 98c:	84 ff       	sbrs	r24, 4
 98e:	2f c0       	rjmp	.+94     	; 0x9ee <__vector_11+0xda>
 990:	80 91 e2 00 	lds	r24, 0x00E2
 994:	84 ff       	sbrs	r24, 4
 996:	2b c0       	rjmp	.+86     	; 0x9ee <__vector_11+0xda>
 998:	84 e0       	ldi	r24, 0x04	; 4
 99a:	89 bd       	out	0x29, r24	; 41
 99c:	86 e0       	ldi	r24, 0x06	; 6
 99e:	89 bd       	out	0x29, r24	; 41
 9a0:	09 b4       	in	r0, 0x29	; 41
 9a2:	00 fe       	sbrs	r0, 0
 9a4:	fd cf       	rjmp	.-6      	; 0x9a0 <__vector_11+0x8c>
 9a6:	80 91 d8 00 	lds	r24, 0x00D8
 9aa:	8f 7d       	andi	r24, 0xDF	; 223
 9ac:	80 93 d8 00 	sts	0x00D8, r24
 9b0:	80 91 e1 00 	lds	r24, 0x00E1
 9b4:	8f 7e       	andi	r24, 0xEF	; 239
 9b6:	80 93 e1 00 	sts	0x00E1, r24
 9ba:	80 91 e2 00 	lds	r24, 0x00E2
 9be:	8f 7e       	andi	r24, 0xEF	; 239
 9c0:	80 93 e2 00 	sts	0x00E2, r24
 9c4:	80 91 e2 00 	lds	r24, 0x00E2
 9c8:	81 60       	ori	r24, 0x01	; 1
 9ca:	80 93 e2 00 	sts	0x00E2, r24
 9ce:	80 91 bb 02 	lds	r24, 0x02BB
 9d2:	88 23       	and	r24, r24
 9d4:	11 f0       	breq	.+4      	; 0x9da <__vector_11+0xc6>
 9d6:	84 e0       	ldi	r24, 0x04	; 4
 9d8:	07 c0       	rjmp	.+14     	; 0x9e8 <__vector_11+0xd4>
 9da:	80 91 e3 00 	lds	r24, 0x00E3
 9de:	87 ff       	sbrs	r24, 7
 9e0:	02 c0       	rjmp	.+4      	; 0x9e6 <__vector_11+0xd2>
 9e2:	83 e0       	ldi	r24, 0x03	; 3
 9e4:	01 c0       	rjmp	.+2      	; 0x9e8 <__vector_11+0xd4>
 9e6:	81 e0       	ldi	r24, 0x01	; 1
 9e8:	80 93 bf 02 	sts	0x02BF, r24
 9ec:	e1 db       	rcall	.-2110   	; 0x1b0 <EVENT_USB_Device_Connect>
 9ee:	80 91 e1 00 	lds	r24, 0x00E1
 9f2:	83 ff       	sbrs	r24, 3
 9f4:	22 c0       	rjmp	.+68     	; 0xa3a <__vector_11+0x126>
 9f6:	80 91 e2 00 	lds	r24, 0x00E2
 9fa:	83 ff       	sbrs	r24, 3
 9fc:	1e c0       	rjmp	.+60     	; 0xa3a <__vector_11+0x126>
 9fe:	80 91 e1 00 	lds	r24, 0x00E1
 a02:	87 7f       	andi	r24, 0xF7	; 247
 a04:	80 93 e1 00 	sts	0x00E1, r24
 a08:	82 e0       	ldi	r24, 0x02	; 2
 a0a:	80 93 bf 02 	sts	0x02BF, r24
 a0e:	10 92 bb 02 	sts	0x02BB, r1
 a12:	80 91 e1 00 	lds	r24, 0x00E1
 a16:	8e 7f       	andi	r24, 0xFE	; 254
 a18:	80 93 e1 00 	sts	0x00E1, r24
 a1c:	80 91 e2 00 	lds	r24, 0x00E2
 a20:	8e 7f       	andi	r24, 0xFE	; 254
 a22:	80 93 e2 00 	sts	0x00E2, r24
 a26:	80 91 e2 00 	lds	r24, 0x00E2
 a2a:	80 61       	ori	r24, 0x10	; 16
 a2c:	80 93 e2 00 	sts	0x00E2, r24
 a30:	42 e3       	ldi	r20, 0x32	; 50
 a32:	60 e0       	ldi	r22, 0x00	; 0
 a34:	80 e0       	ldi	r24, 0x00	; 0
 a36:	a0 de       	rcall	.-704    	; 0x778 <Endpoint_ConfigureEndpoint_Prv>
 a38:	6a d1       	rcall	.+724    	; 0xd0e <USB_Event_Stub>
 a3a:	ff 91       	pop	r31
 a3c:	ef 91       	pop	r30
 a3e:	bf 91       	pop	r27
 a40:	af 91       	pop	r26
 a42:	9f 91       	pop	r25
 a44:	8f 91       	pop	r24
 a46:	7f 91       	pop	r23
 a48:	6f 91       	pop	r22
 a4a:	5f 91       	pop	r21
 a4c:	4f 91       	pop	r20
 a4e:	3f 91       	pop	r19
 a50:	2f 91       	pop	r18
 a52:	0f 90       	pop	r0
 a54:	0f be       	out	0x3f, r0	; 63
 a56:	0f 90       	pop	r0
 a58:	1f 90       	pop	r1
 a5a:	18 95       	reti

00000a5c <USB_Device_ProcessControlRequest>:
 a5c:	1f 93       	push	r17
 a5e:	cf 93       	push	r28
 a60:	df 93       	push	r29
 a62:	cd b7       	in	r28, 0x3d	; 61
 a64:	de b7       	in	r29, 0x3e	; 62
 a66:	aa 97       	sbiw	r28, 0x2a	; 42
 a68:	0f b6       	in	r0, 0x3f	; 63
 a6a:	f8 94       	cli
 a6c:	de bf       	out	0x3e, r29	; 62
 a6e:	0f be       	out	0x3f, r0	; 63
 a70:	cd bf       	out	0x3d, r28	; 61
 a72:	e0 ec       	ldi	r30, 0xC0	; 192
 a74:	f2 e0       	ldi	r31, 0x02	; 2
 a76:	80 91 f1 00 	lds	r24, 0x00F1
 a7a:	81 93       	st	Z+, r24
 a7c:	22 e0       	ldi	r18, 0x02	; 2
 a7e:	e8 3c       	cpi	r30, 0xC8	; 200
 a80:	f2 07       	cpc	r31, r18
 a82:	c9 f7       	brne	.-14     	; 0xa76 <USB_Device_ProcessControlRequest+0x1a>
 a84:	9f db       	rcall	.-2242   	; 0x1c4 <EVENT_USB_Device_ControlRequest>
 a86:	80 91 e8 00 	lds	r24, 0x00E8
 a8a:	83 ff       	sbrs	r24, 3
 a8c:	28 c1       	rjmp	.+592    	; 0xcde <USB_Device_ProcessControlRequest+0x282>
 a8e:	90 91 c0 02 	lds	r25, 0x02C0
 a92:	80 91 c1 02 	lds	r24, 0x02C1
 a96:	85 30       	cpi	r24, 0x05	; 5
 a98:	09 f4       	brne	.+2      	; 0xa9c <USB_Device_ProcessControlRequest+0x40>
 a9a:	81 c0       	rjmp	.+258    	; 0xb9e <USB_Device_ProcessControlRequest+0x142>
 a9c:	30 f4       	brcc	.+12     	; 0xaaa <USB_Device_ProcessControlRequest+0x4e>
 a9e:	81 30       	cpi	r24, 0x01	; 1
 aa0:	a9 f1       	breq	.+106    	; 0xb0c <USB_Device_ProcessControlRequest+0xb0>
 aa2:	68 f0       	brcs	.+26     	; 0xabe <USB_Device_ProcessControlRequest+0x62>
 aa4:	83 30       	cpi	r24, 0x03	; 3
 aa6:	91 f1       	breq	.+100    	; 0xb0c <USB_Device_ProcessControlRequest+0xb0>
 aa8:	1a c1       	rjmp	.+564    	; 0xcde <USB_Device_ProcessControlRequest+0x282>
 aaa:	88 30       	cpi	r24, 0x08	; 8
 aac:	09 f4       	brne	.+2      	; 0xab0 <USB_Device_ProcessControlRequest+0x54>
 aae:	ec c0       	rjmp	.+472    	; 0xc88 <USB_Device_ProcessControlRequest+0x22c>
 ab0:	89 30       	cpi	r24, 0x09	; 9
 ab2:	09 f4       	brne	.+2      	; 0xab6 <USB_Device_ProcessControlRequest+0x5a>
 ab4:	f8 c0       	rjmp	.+496    	; 0xca6 <USB_Device_ProcessControlRequest+0x24a>
 ab6:	86 30       	cpi	r24, 0x06	; 6
 ab8:	09 f0       	breq	.+2      	; 0xabc <USB_Device_ProcessControlRequest+0x60>
 aba:	11 c1       	rjmp	.+546    	; 0xcde <USB_Device_ProcessControlRequest+0x282>
 abc:	92 c0       	rjmp	.+292    	; 0xbe2 <USB_Device_ProcessControlRequest+0x186>
 abe:	90 38       	cpi	r25, 0x80	; 128
 ac0:	21 f0       	breq	.+8      	; 0xaca <USB_Device_ProcessControlRequest+0x6e>
 ac2:	92 38       	cpi	r25, 0x82	; 130
 ac4:	09 f0       	breq	.+2      	; 0xac8 <USB_Device_ProcessControlRequest+0x6c>
 ac6:	0b c1       	rjmp	.+534    	; 0xcde <USB_Device_ProcessControlRequest+0x282>
 ac8:	08 c0       	rjmp	.+16     	; 0xada <USB_Device_ProcessControlRequest+0x7e>
 aca:	80 91 bc 02 	lds	r24, 0x02BC
 ace:	90 91 bd 02 	lds	r25, 0x02BD
 ad2:	99 23       	and	r25, r25
 ad4:	89 f0       	breq	.+34     	; 0xaf8 <USB_Device_ProcessControlRequest+0x9c>
 ad6:	82 60       	ori	r24, 0x02	; 2
 ad8:	0f c0       	rjmp	.+30     	; 0xaf8 <USB_Device_ProcessControlRequest+0x9c>
 ada:	80 91 c4 02 	lds	r24, 0x02C4
 ade:	8f 70       	andi	r24, 0x0F	; 15
 ae0:	85 30       	cpi	r24, 0x05	; 5
 ae2:	08 f0       	brcs	.+2      	; 0xae6 <USB_Device_ProcessControlRequest+0x8a>
 ae4:	fc c0       	rjmp	.+504    	; 0xcde <USB_Device_ProcessControlRequest+0x282>
 ae6:	80 93 e9 00 	sts	0x00E9, r24
 aea:	80 91 eb 00 	lds	r24, 0x00EB
 aee:	85 fb       	bst	r24, 5
 af0:	88 27       	eor	r24, r24
 af2:	80 f9       	bld	r24, 0
 af4:	10 92 e9 00 	sts	0x00E9, r1
 af8:	90 91 e8 00 	lds	r25, 0x00E8
 afc:	97 7f       	andi	r25, 0xF7	; 247
 afe:	90 93 e8 00 	sts	0x00E8, r25
 b02:	80 93 f1 00 	sts	0x00F1, r24
 b06:	10 92 f1 00 	sts	0x00F1, r1
 b0a:	c9 c0       	rjmp	.+402    	; 0xc9e <USB_Device_ProcessControlRequest+0x242>
 b0c:	29 2f       	mov	r18, r25
 b0e:	2d 7f       	andi	r18, 0xFD	; 253
 b10:	09 f0       	breq	.+2      	; 0xb14 <USB_Device_ProcessControlRequest+0xb8>
 b12:	e5 c0       	rjmp	.+458    	; 0xcde <USB_Device_ProcessControlRequest+0x282>
 b14:	99 23       	and	r25, r25
 b16:	19 f0       	breq	.+6      	; 0xb1e <USB_Device_ProcessControlRequest+0xc2>
 b18:	92 30       	cpi	r25, 0x02	; 2
 b1a:	61 f0       	breq	.+24     	; 0xb34 <USB_Device_ProcessControlRequest+0xd8>
 b1c:	e0 c0       	rjmp	.+448    	; 0xcde <USB_Device_ProcessControlRequest+0x282>
 b1e:	90 91 c2 02 	lds	r25, 0x02C2
 b22:	91 30       	cpi	r25, 0x01	; 1
 b24:	09 f0       	breq	.+2      	; 0xb28 <USB_Device_ProcessControlRequest+0xcc>
 b26:	db c0       	rjmp	.+438    	; 0xcde <USB_Device_ProcessControlRequest+0x282>
 b28:	83 30       	cpi	r24, 0x03	; 3
 b2a:	09 f0       	breq	.+2      	; 0xb2e <USB_Device_ProcessControlRequest+0xd2>
 b2c:	90 e0       	ldi	r25, 0x00	; 0
 b2e:	90 93 bd 02 	sts	0x02BD, r25
 b32:	2c c0       	rjmp	.+88     	; 0xb8c <USB_Device_ProcessControlRequest+0x130>
 b34:	90 91 c2 02 	lds	r25, 0x02C2
 b38:	91 11       	cpse	r25, r1
 b3a:	28 c0       	rjmp	.+80     	; 0xb8c <USB_Device_ProcessControlRequest+0x130>
 b3c:	20 91 c4 02 	lds	r18, 0x02C4
 b40:	2f 70       	andi	r18, 0x0F	; 15
 b42:	9f ef       	ldi	r25, 0xFF	; 255
 b44:	92 0f       	add	r25, r18
 b46:	94 30       	cpi	r25, 0x04	; 4
 b48:	08 f0       	brcs	.+2      	; 0xb4c <USB_Device_ProcessControlRequest+0xf0>
 b4a:	c9 c0       	rjmp	.+402    	; 0xcde <USB_Device_ProcessControlRequest+0x282>
 b4c:	20 93 e9 00 	sts	0x00E9, r18
 b50:	90 91 eb 00 	lds	r25, 0x00EB
 b54:	90 ff       	sbrs	r25, 0
 b56:	1a c0       	rjmp	.+52     	; 0xb8c <USB_Device_ProcessControlRequest+0x130>
 b58:	83 30       	cpi	r24, 0x03	; 3
 b5a:	21 f4       	brne	.+8      	; 0xb64 <USB_Device_ProcessControlRequest+0x108>
 b5c:	80 91 eb 00 	lds	r24, 0x00EB
 b60:	80 62       	ori	r24, 0x20	; 32
 b62:	12 c0       	rjmp	.+36     	; 0xb88 <USB_Device_ProcessControlRequest+0x12c>
 b64:	80 91 eb 00 	lds	r24, 0x00EB
 b68:	80 61       	ori	r24, 0x10	; 16
 b6a:	80 93 eb 00 	sts	0x00EB, r24
 b6e:	81 e0       	ldi	r24, 0x01	; 1
 b70:	90 e0       	ldi	r25, 0x00	; 0
 b72:	01 c0       	rjmp	.+2      	; 0xb76 <USB_Device_ProcessControlRequest+0x11a>
 b74:	88 0f       	add	r24, r24
 b76:	2a 95       	dec	r18
 b78:	ea f7       	brpl	.-6      	; 0xb74 <USB_Device_ProcessControlRequest+0x118>
 b7a:	80 93 ea 00 	sts	0x00EA, r24
 b7e:	10 92 ea 00 	sts	0x00EA, r1
 b82:	80 91 eb 00 	lds	r24, 0x00EB
 b86:	88 60       	ori	r24, 0x08	; 8
 b88:	80 93 eb 00 	sts	0x00EB, r24
 b8c:	10 92 e9 00 	sts	0x00E9, r1
 b90:	80 91 e8 00 	lds	r24, 0x00E8
 b94:	87 7f       	andi	r24, 0xF7	; 247
 b96:	80 93 e8 00 	sts	0x00E8, r24
 b9a:	23 de       	rcall	.-954    	; 0x7e2 <Endpoint_ClearStatusStage>
 b9c:	a0 c0       	rjmp	.+320    	; 0xcde <USB_Device_ProcessControlRequest+0x282>
 b9e:	91 11       	cpse	r25, r1
 ba0:	9e c0       	rjmp	.+316    	; 0xcde <USB_Device_ProcessControlRequest+0x282>
 ba2:	10 91 c2 02 	lds	r17, 0x02C2
 ba6:	1f 77       	andi	r17, 0x7F	; 127
 ba8:	80 91 e3 00 	lds	r24, 0x00E3
 bac:	80 78       	andi	r24, 0x80	; 128
 bae:	81 2b       	or	r24, r17
 bb0:	80 93 e3 00 	sts	0x00E3, r24
 bb4:	80 91 e8 00 	lds	r24, 0x00E8
 bb8:	87 7f       	andi	r24, 0xF7	; 247
 bba:	80 93 e8 00 	sts	0x00E8, r24
 bbe:	11 de       	rcall	.-990    	; 0x7e2 <Endpoint_ClearStatusStage>
 bc0:	80 91 e8 00 	lds	r24, 0x00E8
 bc4:	80 ff       	sbrs	r24, 0
 bc6:	fc cf       	rjmp	.-8      	; 0xbc0 <USB_Device_ProcessControlRequest+0x164>
 bc8:	80 91 e3 00 	lds	r24, 0x00E3
 bcc:	80 68       	ori	r24, 0x80	; 128
 bce:	80 93 e3 00 	sts	0x00E3, r24
 bd2:	11 23       	and	r17, r17
 bd4:	11 f0       	breq	.+4      	; 0xbda <USB_Device_ProcessControlRequest+0x17e>
 bd6:	83 e0       	ldi	r24, 0x03	; 3
 bd8:	01 c0       	rjmp	.+2      	; 0xbdc <USB_Device_ProcessControlRequest+0x180>
 bda:	82 e0       	ldi	r24, 0x02	; 2
 bdc:	80 93 bf 02 	sts	0x02BF, r24
 be0:	7e c0       	rjmp	.+252    	; 0xcde <USB_Device_ProcessControlRequest+0x282>
 be2:	90 58       	subi	r25, 0x80	; 128
 be4:	92 30       	cpi	r25, 0x02	; 2
 be6:	08 f0       	brcs	.+2      	; 0xbea <USB_Device_ProcessControlRequest+0x18e>
 be8:	7a c0       	rjmp	.+244    	; 0xcde <USB_Device_ProcessControlRequest+0x282>
 bea:	80 91 c2 02 	lds	r24, 0x02C2
 bee:	90 91 c3 02 	lds	r25, 0x02C3
 bf2:	8c 3d       	cpi	r24, 0xDC	; 220
 bf4:	23 e0       	ldi	r18, 0x03	; 3
 bf6:	92 07       	cpc	r25, r18
 bf8:	71 f5       	brne	.+92     	; 0xc56 <USB_Device_ProcessControlRequest+0x1fa>
 bfa:	83 e0       	ldi	r24, 0x03	; 3
 bfc:	8a 83       	std	Y+2, r24	; 0x02
 bfe:	8a e2       	ldi	r24, 0x2A	; 42
 c00:	89 83       	std	Y+1, r24	; 0x01
 c02:	4f b7       	in	r20, 0x3f	; 63
 c04:	f8 94       	cli
 c06:	de 01       	movw	r26, r28
 c08:	13 96       	adiw	r26, 0x03	; 3
 c0a:	20 e0       	ldi	r18, 0x00	; 0
 c0c:	3e e0       	ldi	r19, 0x0E	; 14
 c0e:	51 e2       	ldi	r21, 0x21	; 33
 c10:	e3 2f       	mov	r30, r19
 c12:	f0 e0       	ldi	r31, 0x00	; 0
 c14:	50 93 57 00 	sts	0x0057, r21
 c18:	e4 91       	lpm	r30, Z
 c1a:	20 ff       	sbrs	r18, 0
 c1c:	03 c0       	rjmp	.+6      	; 0xc24 <USB_Device_ProcessControlRequest+0x1c8>
 c1e:	e2 95       	swap	r30
 c20:	ef 70       	andi	r30, 0x0F	; 15
 c22:	3f 5f       	subi	r19, 0xFF	; 255
 c24:	ef 70       	andi	r30, 0x0F	; 15
 c26:	8e 2f       	mov	r24, r30
 c28:	90 e0       	ldi	r25, 0x00	; 0
 c2a:	ea 30       	cpi	r30, 0x0A	; 10
 c2c:	10 f0       	brcs	.+4      	; 0xc32 <USB_Device_ProcessControlRequest+0x1d6>
 c2e:	c7 96       	adiw	r24, 0x37	; 55
 c30:	01 c0       	rjmp	.+2      	; 0xc34 <USB_Device_ProcessControlRequest+0x1d8>
 c32:	c0 96       	adiw	r24, 0x30	; 48
 c34:	8d 93       	st	X+, r24
 c36:	9d 93       	st	X+, r25
 c38:	2f 5f       	subi	r18, 0xFF	; 255
 c3a:	24 31       	cpi	r18, 0x14	; 20
 c3c:	49 f7       	brne	.-46     	; 0xc10 <USB_Device_ProcessControlRequest+0x1b4>
 c3e:	4f bf       	out	0x3f, r20	; 63
 c40:	80 91 e8 00 	lds	r24, 0x00E8
 c44:	87 7f       	andi	r24, 0xF7	; 247
 c46:	80 93 e8 00 	sts	0x00E8, r24
 c4a:	6a e2       	ldi	r22, 0x2A	; 42
 c4c:	70 e0       	ldi	r23, 0x00	; 0
 c4e:	ce 01       	movw	r24, r28
 c50:	01 96       	adiw	r24, 0x01	; 1
 c52:	c8 dc       	rcall	.-1648   	; 0x5e4 <Endpoint_Write_Control_Stream_LE>
 c54:	13 c0       	rjmp	.+38     	; 0xc7c <USB_Device_ProcessControlRequest+0x220>
 c56:	60 91 c4 02 	lds	r22, 0x02C4
 c5a:	70 91 c5 02 	lds	r23, 0x02C5
 c5e:	ae 01       	movw	r20, r28
 c60:	4f 5f       	subi	r20, 0xFF	; 255
 c62:	5f 4f       	sbci	r21, 0xFF	; 255
 c64:	ec db       	rcall	.-2088   	; 0x43e <CALLBACK_USB_GetDescriptor>
 c66:	00 97       	sbiw	r24, 0x00	; 0
 c68:	d1 f1       	breq	.+116    	; 0xcde <USB_Device_ProcessControlRequest+0x282>
 c6a:	20 91 e8 00 	lds	r18, 0x00E8
 c6e:	27 7f       	andi	r18, 0xF7	; 247
 c70:	20 93 e8 00 	sts	0x00E8, r18
 c74:	bc 01       	movw	r22, r24
 c76:	89 81       	ldd	r24, Y+1	; 0x01
 c78:	9a 81       	ldd	r25, Y+2	; 0x02
 c7a:	18 dd       	rcall	.-1488   	; 0x6ac <Endpoint_Write_Control_PStream_LE>
 c7c:	80 91 e8 00 	lds	r24, 0x00E8
 c80:	8b 77       	andi	r24, 0x7B	; 123
 c82:	80 93 e8 00 	sts	0x00E8, r24
 c86:	2b c0       	rjmp	.+86     	; 0xcde <USB_Device_ProcessControlRequest+0x282>
 c88:	90 38       	cpi	r25, 0x80	; 128
 c8a:	49 f5       	brne	.+82     	; 0xcde <USB_Device_ProcessControlRequest+0x282>
 c8c:	80 91 e8 00 	lds	r24, 0x00E8
 c90:	87 7f       	andi	r24, 0xF7	; 247
 c92:	80 93 e8 00 	sts	0x00E8, r24
 c96:	80 91 bb 02 	lds	r24, 0x02BB
 c9a:	80 93 f1 00 	sts	0x00F1, r24
 c9e:	80 91 e8 00 	lds	r24, 0x00E8
 ca2:	8e 77       	andi	r24, 0x7E	; 126
 ca4:	78 cf       	rjmp	.-272    	; 0xb96 <USB_Device_ProcessControlRequest+0x13a>
 ca6:	91 11       	cpse	r25, r1
 ca8:	1a c0       	rjmp	.+52     	; 0xcde <USB_Device_ProcessControlRequest+0x282>
 caa:	90 91 c2 02 	lds	r25, 0x02C2
 cae:	92 30       	cpi	r25, 0x02	; 2
 cb0:	b0 f4       	brcc	.+44     	; 0xcde <USB_Device_ProcessControlRequest+0x282>
 cb2:	80 91 e8 00 	lds	r24, 0x00E8
 cb6:	87 7f       	andi	r24, 0xF7	; 247
 cb8:	80 93 e8 00 	sts	0x00E8, r24
 cbc:	90 93 bb 02 	sts	0x02BB, r25
 cc0:	90 dd       	rcall	.-1248   	; 0x7e2 <Endpoint_ClearStatusStage>
 cc2:	80 91 bb 02 	lds	r24, 0x02BB
 cc6:	81 11       	cpse	r24, r1
 cc8:	04 c0       	rjmp	.+8      	; 0xcd2 <USB_Device_ProcessControlRequest+0x276>
 cca:	80 91 e3 00 	lds	r24, 0x00E3
 cce:	87 ff       	sbrs	r24, 7
 cd0:	02 c0       	rjmp	.+4      	; 0xcd6 <USB_Device_ProcessControlRequest+0x27a>
 cd2:	84 e0       	ldi	r24, 0x04	; 4
 cd4:	01 c0       	rjmp	.+2      	; 0xcd8 <USB_Device_ProcessControlRequest+0x27c>
 cd6:	81 e0       	ldi	r24, 0x01	; 1
 cd8:	80 93 bf 02 	sts	0x02BF, r24
 cdc:	6b da       	rcall	.-2858   	; 0x1b4 <EVENT_USB_Device_ConfigurationChanged>
 cde:	80 91 e8 00 	lds	r24, 0x00E8
 ce2:	83 ff       	sbrs	r24, 3
 ce4:	0a c0       	rjmp	.+20     	; 0xcfa <USB_Device_ProcessControlRequest+0x29e>
 ce6:	80 91 e8 00 	lds	r24, 0x00E8
 cea:	87 7f       	andi	r24, 0xF7	; 247
 cec:	80 93 e8 00 	sts	0x00E8, r24
 cf0:	80 91 eb 00 	lds	r24, 0x00EB
 cf4:	80 62       	ori	r24, 0x20	; 32
 cf6:	80 93 eb 00 	sts	0x00EB, r24
 cfa:	aa 96       	adiw	r28, 0x2a	; 42
 cfc:	0f b6       	in	r0, 0x3f	; 63
 cfe:	f8 94       	cli
 d00:	de bf       	out	0x3e, r29	; 62
 d02:	0f be       	out	0x3f, r0	; 63
 d04:	cd bf       	out	0x3d, r28	; 61
 d06:	df 91       	pop	r29
 d08:	cf 91       	pop	r28
 d0a:	1f 91       	pop	r17
 d0c:	08 95       	ret

00000d0e <USB_Event_Stub>:
 d0e:	08 95       	ret

00000d10 <USB_USBTask>:
 d10:	cf 93       	push	r28
 d12:	80 91 bf 02 	lds	r24, 0x02BF
 d16:	88 23       	and	r24, r24
 d18:	a9 f0       	breq	.+42     	; 0xd44 <USB_USBTask+0x34>
 d1a:	80 91 e9 00 	lds	r24, 0x00E9
 d1e:	8f 70       	andi	r24, 0x0F	; 15
 d20:	90 91 ec 00 	lds	r25, 0x00EC
 d24:	90 ff       	sbrs	r25, 0
 d26:	02 c0       	rjmp	.+4      	; 0xd2c <USB_USBTask+0x1c>
 d28:	90 e8       	ldi	r25, 0x80	; 128
 d2a:	01 c0       	rjmp	.+2      	; 0xd2e <USB_USBTask+0x1e>
 d2c:	90 e0       	ldi	r25, 0x00	; 0
 d2e:	c9 2f       	mov	r28, r25
 d30:	c8 2b       	or	r28, r24
 d32:	10 92 e9 00 	sts	0x00E9, r1
 d36:	80 91 e8 00 	lds	r24, 0x00E8
 d3a:	83 fd       	sbrc	r24, 3
 d3c:	8f de       	rcall	.-738    	; 0xa5c <USB_Device_ProcessControlRequest>
 d3e:	cf 70       	andi	r28, 0x0F	; 15
 d40:	c0 93 e9 00 	sts	0x00E9, r28
 d44:	cf 91       	pop	r28
 d46:	08 95       	ret

00000d48 <__mulhi3>:
 d48:	00 24       	eor	r0, r0
 d4a:	55 27       	eor	r21, r21
 d4c:	04 c0       	rjmp	.+8      	; 0xd56 <__mulhi3+0xe>
 d4e:	08 0e       	add	r0, r24
 d50:	59 1f       	adc	r21, r25
 d52:	88 0f       	add	r24, r24
 d54:	99 1f       	adc	r25, r25
 d56:	00 97       	sbiw	r24, 0x00	; 0
 d58:	29 f0       	breq	.+10     	; 0xd64 <__mulhi3+0x1c>
 d5a:	76 95       	lsr	r23
 d5c:	67 95       	ror	r22
 d5e:	b8 f3       	brcs	.-18     	; 0xd4e <__mulhi3+0x6>
 d60:	71 05       	cpc	r23, r1
 d62:	b9 f7       	brne	.-18     	; 0xd52 <__mulhi3+0xa>
 d64:	80 2d       	mov	r24, r0
 d66:	95 2f       	mov	r25, r21
 d68:	08 95       	ret

00000d6a <_exit>:
 d6a:	f8 94       	cli

00000d6c <__stop_program>:
 d6c:	ff cf       	rjmp	.-2      	; 0xd6c <__stop_program>
